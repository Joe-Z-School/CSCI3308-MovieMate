<style>
    body {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        display: block !important;
        justify-content: unset !important;
    }

    /* Purple buttons */
    .btn-purple {
        background-color: #5F4B8B !important;
        color: white !important;
        border: none !important;
    }

    .btn-purple:hover {
        background-color: #4a3a6d !important;
        color: white !important;
    }

    .post-content {
        background-color: #222;
        color: #fff;
        padding: 10px;
        border-radius: 8px;
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
    }

    .post-actions {
        color: #ccc;
    }

    .post-action {
        margin-right: 10px;
        cursor: pointer;
    }

   .post-container {
        display: grid;
        grid-template-columns: repeat(2, 1fr); /* Exactly 2 columns */
        gap: 20px;
        margin-top: 20px;
        width: 100%;
        max-width: 1000px;
        padding: 20px;
    }

    /* Style for "Add Post" button */
    .btn-add-post {
        background-color: #5F4B8B;
        color: white;
        border: none;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        border-radius: 5px;
    }

    .btn-add-post:hover {
        background-color: #4a3a6d;
    }

    /* Style for input fields */

    textarea.form-control,
    input.form-control {
        background-color: #222 !important;
        color: #999 !important;
        border: 1px solid #444 !important;
    }

    /* Hide the native file input */
    .custom-file-upload input[type="file"] {
        display: none !important;
    }

    /* Container for the file input */
    .custom-file-upload {
        background-color: #222 !important;
        border: 1px solid #444 !important;
        padding: 12px 16px !important;
        border-radius: 6px !important;
        display: flex !important;
        align-items: center !important;
        gap: 12px !important;
        color: #999 !important;
    }

    /* Style the "Choose File" button (label) */
    .custom-file-upload .file-button {
        background-color: #6f42c1 !important;
        color: white !important;
        padding: 8px 16px !important;
        border-radius: 4px !important;
        cursor: pointer;
        transition: background-color 0.2s ease;
        border: none !important;
        font-size: 0.9rem;
        display: inline-block;
    }

    /* Hover, focus, and active states for the button */
    .custom-file-upload .file-button:hover,
    .custom-file-upload .file-button:focus,
    .custom-file-upload .file-button:active {
        background-color: #000 !important;
        color: #999 !important;
    }

    /* File name styling */
    .file-name-text {
        color: #999 !important;
        font-size: 0.9rem !important;
    }

    /* Optional: Style the file input on focus (but it's hidden, so it's just for UX) */
    input[type="file"]:focus {
        outline: none;
        background-color: #222;
        /* Keep dark */
        color: #999;
        border-color: #6f42c1;
        /* Optional: purple border on focus */
    }

    /* (Alternative) Making the native file button black on hover/focus/click */
    input[type="file"]::file-selector-button:hover,
    input[type="file"]::file-selector-button:active,
    input[type="file"]::file-selector-button:focus {
        background-color: #000 !important;
        color: #999 !important;
    }

    .radio-group {
        display: flex;
        flex-direction: column;
        position: relative;
        gap: 0.5rem;
        padding-left: 32px;
        margin-top: 0.5rem;
        margin-bottom: 0.5rem;
    }

    .radio-group input[type="radio"] {
        display: none;
    }

    .radio-group label {
        position: relative;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 500;
        color: white;
        display: flex;
        align-items: center;
    }

    /* No bullet points needed in label */
    .radio-group label::before {
        content: none;
    }

    /* Shared circle styles */
    .radio-group .glow-indicator,
    .radio-group .outline-indicator {
        position: absolute;
        left: 0px;
        width: 18px;
        height: 18px;
        border-radius: 50%;
        transition: top 0.6s cubic-bezier(0.68, -0.6, 0.32, 1.6);
        pointer-events: none;
    }

    /* Filled glowing one */
    .glow-indicator {
        background: #6f42c1;
        box-shadow: 0 0 10px 4px rgba(168, 84, 240, 0.6);
        z-index: 2;
    }

    /* Ring one */
    .outline-indicator {
        border: 2px solid #6f42c1;
        background-color: transparent;
        z-index: 1;
        opacity: 0.6;
        box-shadow: 0 0 4px rgba(168, 84, 240, 0.3);
    }   

    /* User Upload checked — glow on top */
    .radio-group input#upload:checked ~ .glow-indicator {
        top: 4px;
    }
    .radio-group input#upload:checked ~ .outline-indicator {
        top: 35px;
    }

    /* Poster is checked — glow on bottom */
    .radio-group input#poster:checked ~ .glow-indicator {
        top: 35px;
    }

    .radio-group input#poster:checked ~ .outline-indicator {
        top: 4px;
    }

    .upload-box {
        margin-top: 1.5rem;
        margin-bottom: 0.5rem;
        padding: 2rem;
        border: 2px dashed #6f42c1;
        border-radius: 12px;
        text-align: center;
        color: #ddd;
        background-color: rgba(255, 255, 255, 0.02);
        transition: background-color 0.3s ease;
        cursor: pointer;
        position: relative;
    }

    .upload-box:hover {
        background-color: rgba(168, 84, 240, 0.05);
    }

    .upload-box-content {
        pointer-events: none;
    }

    .click-text {
        color: #6f42c1;
        text-decoration: underline;
        pointer-events: none;
    }

    .hidden {
        display: none;
    }

    #preview-container {
        text-align: center;
    }

    #preview-image {
        max-height: 250px;
        object-fit: contain;
        border: 3px solid #6f42c1;
        padding: 4px;
        background-color: rgba(255, 255, 255, 0.03);
        box-shadow: 0 0 12px 3px rgba(168, 84, 240, 0.5); /* glowing border */
        border-radius: 12px;
    }

    #preview-image:hover {
        box-shadow: 0 0 15px rgba(168, 84, 240, 1); /* Glowing effect on hover */
    }

    #resetImageBtn {
        background-color: #6f42c1;
        color: white;
        border: none;
        cursor: pointer;
    }

    #resetImageBtn:hover {
        background-color: #5a24c0;
    }

    .custom-dropdown {
        position: relative;
        background-color: #222;
        border: 1px solid #9999994d;
        border-radius: 8px;
        cursor: pointer;
        user-select: none;
        transition: border 0.3s ease;
        color: #A884F0;
        padding: 10px;
        width: 100%;
        font-size: 16px;
        margin-top: 15px;
        margin-bottom: 15px;
    }

    .custom-dropdown:hover {
        border-color: #4a3a6d;
    }

    .dropdown-selected::after {
        content: "▼";
        float: right;
        color: #5F4B8B;
    }

    .dropdown-options {
        position: absolute;
        top: 100%;
        left: 0;
        right: 0;
        background-color: #222;
        border: 1px solid #5F4B8B;
        border-top: none;
        z-index: 1000;
        display: none;
        max-height: 200px;
        overflow-y: auto;
        border-radius: 0 0 8px 8px;
        animation: fadeIn 0.3s ease-in-out;
    }

    .dropdown-options div {
        padding: 10px;
        transition: background-color 0.2s;
    }

    .dropdown-options div:hover {
        background-color: #4a3a6d;
        color: #A884F0;
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
        }
        to {
            opacity: 1;
        }
    }

    input::placeholder,
    textarea::placeholder {
        color: #5F4B8B !important;
        font-style: italic !important;
        opacity: 1 !important;
    }

    .form-floating-container {
        position: relative;
        margin-bottom: 1.5rem;
        margin-top: 0.5rem;
    }

    .floating-input {
        background-color: #222;
        color: #fff;
        border: 1px solid #444;
        padding: 14px 12px 8px 12px;
        border-radius: 6px;
        width: 100%;
    }

    .floating-label {
        position: absolute;
        left: 12px;
        top: 14px;
        color: #A884F0;
        font-style: italic;
        font-size: 0.95rem;
        transition: all 0.2s ease;
        pointer-events: none;
    }

    .floating-input:focus + .floating-label,
    .floating-input:not(:placeholder-shown) + .floating-label {
        top: -10px;
        left: 10px;
        font-size: 0.8rem;
        background-color: #222;
        padding: 0 4px;
        border-radius: 4px;
    }

    input::placeholder,
    textarea::placeholder {
        opacity: 0;
        animation: fadeInPlaceholder 1s ease forwards;
        color: #A884F0 !important;
        font-style: italic !important;
    }

    @keyframes fadeInPlaceholder {
        to {
            opacity: 1;
        }
    }

    input.form-control:focus,
    textarea.form-control:focus {
        border-image: linear-gradient(90deg, #A884F0, #5F4B8B) 1;
        box-shadow: 0 0 10px rgba(168, 132, 240, 0.6);
    }
    
    #filmReelRating {
  --background: rgba(0, 0, 0, .35);
  --size: 10px;
  background-image:
    linear-gradient(to right, var(--background) var(--size), transparent var(--size)),
    linear-gradient(to bottom, var(--background) var(--size), transparent var(--size)),
    linear-gradient(to right, var(--background) var(--size), transparent var(--size)),
    linear-gradient(to bottom, var(--background) var(--size), transparent var(--size)),
    linear-gradient(to bottom, transparent var(--size), var(--background) var(--size));
  background-size: calc(var(--size) * 2) var(--size),
                   calc(var(--size) * 2) var(--size),
                   calc(var(--size) * 2) var(--size),
                   calc(var(--size) * 2) var(--size),
                   100% calc(100% - var(--size) * 3);
  background-repeat: repeat-x;
  background-position: 0 var(--size), top left, 0 calc(100% - var(--size)), bottom left, 0 var(--size);
  padding: calc(var(--size) * 3) 5px;
  box-sizing: border-box;
  border-radius: 12px;
  position: relative;
  display: inline-block;
}

.svg-container {
  position: relative;
  height: 90px; 
  overflow: visible;
}

svg {
  overflow: visible;
}

.reel-slot rect {
  fill: #333;
  stroke: #6f42c1;
  stroke-width: 2;
  cursor: pointer;
  transition: fill 0.3s ease, transform 0.3s ease;
  transform-origin: center bottom;
}

.reel-slot.filled rect {
  fill: #6f42c1;
  filter: drop-shadow(0 0 4px rgba(111, 66, 193, 0.4));
  animation: pop-up 0.3s ease;
}

.reel-slot:hover rect,
.reel-slot.hovered rect {
  fill: #854eca;
  filter: drop-shadow(0 0 4px rgba(111, 66, 193, 0.4));
  transform: translateY(-6px);
}

@keyframes pop-up {
  0%   { transform: translateY(10px); opacity: 0.5; }
  50%  { transform: translateY(-8px); opacity: 1; }
  100% { transform: translateY(0); }
}



</style>

{{> nav}}
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

<div class="profile-container">
    <div class="profile-header">
        <img src="../../resources/img/{{profile.profile_icon}}" alt="Profile Picture" class="profile-pic">

        <div class="profile-info">
            <h1 class="profile-name">{{profile.first_name}} {{profile.last_name}}</h1>
            <p class="profile-username">@{{profile.username}}</p>
            <div class="profile-bio">
                <p>{{profile.bio}}</p>
            </div>
            {{#if isOwnProfile}}
            <button id="openEditModal" class="btn-edit">Edit Profile</button>
            {{else}}
            {{#if profile.is_following}}
            <button type="button" class="btn btn-outline-danger"
                style="padding: 10px 20px; font-size: 16px; border-radius: 5px;"
                onclick="showUnfollowModal('{{profile.id}}', '{{profile.username}}')">Unfollow</button>
            {{else if profile.is_requested}}
            <button type="button" class="btn btn-warning"
                onclick="showCancelRequestModal('{{profile.id}}', '{{profile.username}}')">
                Requested</button>
            {{else}}
            <form action="/users/follow" method="POST">
                <input type="hidden" name="following_id" value="{{profile.id}}">
                <button type="submit"
                    style="background-color: #5F4B8B; color: white; border: none; padding: 10px 20px; font-size: 16px; border-radius: 5px;">Follow</button>
            </form>
            {{/if}}
            {{/if}}
        </div>
    </div>

    <div class="profile-stats">
        <div class="stat-item">
            <a href="/profile/watchlist?userId={{profile.id}}" style="text-decoration: none; color: inherit;">
                <div class="stat-value">{{watchlistCount}}</div>
                <div class="stat-label" id="followers">Watchlist</div>
            </a>
        </div>
        <div class="stat-item">
            <a href="/profile/followers?userId={{profile.id}}" style="text-decoration: none; color: inherit;">
                <div class="stat-value">{{followersCount}}</div>
                <div class="stat-label" id="followers">Followers</div>
            </a>
        </div>
        <div class="stat-item">
            <a href="/profile/following?userId={{profile.id}}" style="text-decoration: none; color: inherit;">
                <div class="stat-value">{{followingCount}}</div>
                <div class="stat-label" id="following">Following</div>
            </a>
        </div>
    </div>

    <!-- Add Post Button -->
    {{#if isOwnProfile}}
    <button type="button" class="btn btn-purple mt-4" data-bs-toggle="modal" data-bs-target="#postModal">
        Add Post
    </button>
    {{/if}}

    <h3 style="margin-top: 30px;">Recent Posts</h3>
    <div class="post-container">
       {{#each posts}}
       <div class="post-content">
            <a href="#" data-bs-toggle="modal" data-bs-target="#postDetailsModal" onclick="showPostDetails('{{id}}')">
                <img src="{{cover}}" alt="{{title}} cover" style="width: 100%; height: auto; border-radius: 8px; margin-bottom: 10px;">
            </a>
        </div>
    {{/each}}
    </div>

    {{> postDetailsModal}}  <!-- Include post details modal -->

</div>

{{#unless posts.length}}
<p>No posts yet.</p>
{{/unless}}
</div>
</div>
{{#if isOwnProfile}}
{{> edit-profile-modal}}
{{/if}}
{{>follow-modal}}

<!-- Modal HTML for Posting Movie Review -->
<div class="modal fade" id="postModal" tabindex="-1" aria-labelledby="addPostModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content bg-dark text-light">
            <div class="modal-header">
                <h5 class="modal-title" id="addPostModalLabel">Create a New Post</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addPostForm" enctype="multipart/form-data">
                <div class="modal-body">
                    <!-- Select Image -->
                    <div class="radio-container">
                        <p class="form-label mb-2 fw-bold">Choose a Movie Poster or Upload Your Own Picture</p>
                        <div class="radio-group">
                            <input type="radio" id="upload" name="imageSource" checked>
                            <label for="upload" class="fw-bold" style="color: #999">Upload Your Own</label>
                            <input type="radio" id="poster" name="imageSource">
                            <label for="poster" class="fw-bold" style="color: #999">Use Movie Poster From Watchlist</label>
                            <div class="glow-indicator"></div>
                            <div class="outline-indicator"></div>
                        </div>
                    </div>
                    <!-- Upload Box -->
                    <div id="upload-box" class="upload-box hidden">
                        <input type="file" id="fileInput" accept="image/*" hidden>
                        <div class="upload-box-content">
                            <i class="bi bi-upload fs-1"></i>
                            <p>Drag and drop an image here,<br>or <span class="click-text">click to browse</span></p>
                        </div>
                    </div>
                    <!-- Image Preview -->
                    <div id="preview-container" class="mt-3 text-center hidden">
                        <p class="mb-1">Image Preview:</p>
                        <img id="preview-image" class="img-fluid rounded shadow" alt="Preview" />
                    </div>
                    <div class="text-center">
                        <button type="button" id="resetImageBtn" class="btn btn-outline-light mt-3 hidden">Reset Image</button>
                    </div>
                    <div id="upload-error" class="text-danger mt-2 hidden">File is too large. Max size is 2MB.</div>
                    <!-- Movie Poster Dropdown -->
                    <div id="posterContainer" class="d-none">
                        <div class="custom-dropdown" id="customPosterDropdown">
                            <div class="dropdown-selected" id="dropdownSelected">Select Movie From Watchlist</div>
                            <div class="dropdown-options" id="dropdownOptions"></div>
                        </div>
                        <input type="hidden" id="posterSelector" name="posterSelector" />
                    </div>
                    <!-- Post Title -->
                    <div class="mb-3">
                        <label for="postTitle" class="form-label mb-2 fw-bold" style="color: #999">Post Title</label>
                        <div class="form-floating-container">
                            <input type="text" id="postTitle" name="postTitle" class="form-control floating-input" placeholder=" " />
                            <label for="postTitle" class="floating-label">Enter your post title or leave blank to use movie title</label>
                        </div>
                    </div>
                    <!-- Comments -->
                    <div class="mb-3">
                        <label for="postBody" class="form-label mb-2 fw-bold" style="color: #999">Your Comments</label>
                        <div class="form-floating-container">
                            <textarea class="form-control floating-input" id="postBody" name="postBody" rows="4" placeholder=" "></textarea>                    
                            <label for="postTitle" class="floating-label">Share your thoughts about the movie...</label>
                        </div>
                    </div>
                    <!-- Star Rating (Film Reel Style) -->                    
                    <div class="mb-3">
                        <label class="form-label mb-2 fw-bold d-block" style="color: #999;">Your Rating</label>
                        <div style="text-align: center;">
                            <div id="filmReelRating" class="svg-reel-wrapper">
                                <div class="svg-container">
                                    <svg viewBox="0 0 560 80" width="100%" height="80">
                                    <g class="reel-slot" data-value="1"><rect x="10" y="1" width="100" height="88" rx="5" ry="10"/></g>
                                    <g class="reel-slot" data-value="2"><rect x="120" y="1" width="100" height="88" rx="5" ry="10"/></g>
                                    <g class="reel-slot" data-value="3"><rect x="230" y="1" width="100" height="88" rx="5" ry="10"/></g>
                                    <g class="reel-slot" data-value="4"><rect x="340" y="1" width="100" height="88" rx="5" ry="10"/></g>
                                    <g class="reel-slot" data-value="5"><rect x="450" y="1" width="100" height="88" rx="5" ry="10"/></g>
                                    </svg>
                                </div>
                                <input type="hidden" name="rating" id="ratingValue">
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer" >
                    <button type="submit" class="btn btn-success">Post</button>
                </div>
            </form>
        </div>
    </div>
</div>


<!-- Custom JS -->
<script>

    document.addEventListener('DOMContentLoaded', function () {
        const modal = document.getElementById('editProfileModal');
        const openBtn = document.getElementById('openEditModal');
        const closeBtn = document.querySelector('.close-modal');

        // Modal open/close functionality
        if (openBtn) {
            openBtn.addEventListener('click', () => modal.style.display = 'block');
        }

        if (closeBtn) {
            closeBtn.addEventListener('click', () => modal.style.display = 'none');
        }

        window.addEventListener('click', (e) => {
            if (e.target === modal) modal.style.display = 'none';
        });

        // Icon selection styling
        document.querySelectorAll('.icon-option input').forEach(radio => {
            radio.addEventListener('change', function () {
                document.querySelectorAll('.icon-option').forEach(opt => {
                    opt.classList.toggle('selected', opt.contains(this));
                });
            });
        });

        // Handle post submission
        document.addEventListener('submit', function (e) {
            if (e.target.id === 'moviePostForm') {
                e.preventDefault();

                const fileInput = document.getElementById('movieCover');
                const thoughts = document.getElementById('movieThoughts').value;

                const reader = new FileReader();
                reader.onload = function (e) {
                    const coverUrl = e.target.result;

                    // Compile and append the new post
                    const source = document.getElementById('movie-post-template').innerHTML;
                    const template = Handlebars.compile(source);
                    const newPostHTML = template({ coverUrl, thoughts });

                    const postContainer = document.querySelector('.post-container');
                    postContainer.insertAdjacentHTML('afterbegin', newPostHTML);

                    // Close modal and reset form
                    const modal = bootstrap.Modal.getInstance(document.getElementById('postModal'));
                    modal.hide();
                    document.getElementById('moviePostForm').reset();
                };

                if (fileInput.files.length > 0) {
                    reader.readAsDataURL(fileInput.files[0]);
                } else {
                    // If no image, still render post
                    const source = document.getElementById('movie-post-template').innerHTML;
                    const template = Handlebars.compile(source);
                    const newPostHTML = template({ thoughts });
                    document.querySelector('.post-container').insertAdjacentHTML('afterbegin', newPostHTML);
                }
            }
        });

        // Handle likes
        document.addEventListener('click', function (e) {
            if (e.target.classList.contains('like-btn')) {
                const countEl = e.target.querySelector('.like-count');
                let count = parseInt(countEl.textContent, 10);
                countEl.textContent = count + 1;
            }
        });

        // Handle comments
        document.addEventListener('keypress', function (e) {
            if (e.target.classList.contains('comment-input') && e.key === 'Enter') {
                const commentList = e.target.closest('.post').querySelector('.comment-list');
                const commentText = e.target.value.trim();
                if (commentText) {
                    const li = document.createElement('li');
                    li.classList.add('list-group-item');
                    li.textContent = commentText;
                    commentList.appendChild(li);
                    e.target.value = '';
                }
            }
        });
    });


// js for post details modal:
document.addEventListener("DOMContentLoaded", function () {
    const uploadRadio = document.getElementById("upload");
    const posterRadio = document.getElementById("poster");
    const uploadBox = document.getElementById("upload-box");
    const fileInput = document.getElementById("fileInput");
    const previewContainer = document.getElementById("preview-container");
    const previewImage = document.getElementById("preview-image");
    const errorMessage = document.getElementById("upload-error");
    const resetImageBtn = document.getElementById("resetImageBtn");
    const MAX_SIZE_MB = 2;
    const posterContainer = document.getElementById("posterContainer");
    const posterSelector = document.getElementById("posterSelector");
    const dropdownSelected = document.getElementById("dropdownSelected");
    const dropdownOptions = document.getElementById("dropdownOptions");
    const ratingInput = document.getElementById('ratingValue');
    const reelSlots = document.querySelectorAll('.reel-slot');
    const modal = document.getElementById('postModal');

    // Toggle User Upload or Poster View
    function toggleUploadBox() {
        if (uploadRadio.checked) {
            uploadBox.classList.remove("hidden");
            previewContainer.classList.add("hidden");
            errorMessage.classList.add("hidden");
            posterContainer.classList.add("d-none");
            fileInput.value = "";
        }
        else if (posterRadio.checked) {
            uploadBox.classList.add("hidden");
            previewContainer.classList.add("hidden");
            errorMessage.classList.add("hidden");
            posterContainer.classList.remove("d-none");
            fileInput.value = "";
            previewImage.src = "";
            resetImageBtn.classList.add("hidden");
            dropdownSelected.textContent = "Select Movie From Watchlist";
            posterSelector.value = "";
            dropdownOptions.style.display = "none";
        }
    }

    // Handle file upload
    function handleFile(file) {
        previewImage.src = "";
        const fileSizeMB = file.size / (1024 * 1024);
        if (fileSizeMB > MAX_SIZE_MB) {
            errorMessage.classList.remove("hidden");
            previewContainer.classList.add("hidden");
            fileInput.value = "";
            uploadBox.classList.remove("hidden");
            return;
        }
        errorMessage.classList.add("hidden");

        const reader = new FileReader();
        reader.onload = function (e) {
            previewImage.src = e.target.result;
            previewContainer.classList.remove("hidden");
            resetImageBtn.classList.remove("hidden");
            uploadBox.classList.add("hidden");
        };
        reader.readAsDataURL(file);
    }

    // Watchlist dropdown logic
    async function fetchWatchlist() {
        try {
            const response = await fetch('/profile/watchlist/data');
            const contentType = response.headers.get('Content-Type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('Expected JSON, but got: ' + contentType);
            }
        const watchlist = await response.json();
        const dropdown = document.getElementById("customPosterDropdown");
        const selected = dropdown.querySelector(".dropdown-selected");
        const optionsContainer = dropdown.querySelector(".dropdown-options");
        const hiddenInput = document.getElementById("posterSelector");
        optionsContainer.innerHTML = '';

        if (watchlist.length === 0) {
            const noOption = document.createElement("div");
            noOption.textContent = "No movies in watchlist.";
            optionsContainer.appendChild(noOption);
        }
        else {
            watchlist.forEach(movie => {
                const option = document.createElement("div");
                option.textContent = movie.title;
                option.dataset.value = movie.poster_picture;
                option.addEventListener("click", () => {
                    selected.textContent = movie.title;
                    hiddenInput.value = movie.poster_picture;
                    previewImage.src = movie.poster_picture;
                    previewContainer.classList.remove("hidden");
                    resetImageBtn.classList.add("hidden");
                    optionsContainer.style.display = "none";
                });
                optionsContainer.appendChild(option);
            });
        }

        selected.addEventListener("click", () => {
            optionsContainer.style.display = optionsContainer.style.display === "block" ? "none" : "block";
        });

        document.addEventListener("click", (e) => {
            if (!dropdown.contains(e.target)) {
                optionsContainer.style.display = "none";
            }
        });
        } catch (error) {
            console.error('Error fetching watchlist:', error);
        }
    }

    // File upload
    uploadBox.addEventListener("click", () => fileInput.click());
    uploadBox.addEventListener("dragover", (e) => {
        e.preventDefault();
        uploadBox.style.backgroundColor = "rgba(168, 84, 240, 0.1)";
    });
    uploadBox.addEventListener("dragleave", () => {
        uploadBox.style.backgroundColor = "rgba(255, 255, 255, 0.02)";
    });
    uploadBox.addEventListener("drop", (e) => {
        e.preventDefault();
        uploadBox.style.backgroundColor = "rgba(255, 255, 255, 0.02)";
        if (e.dataTransfer.files.length) {
            const file = e.dataTransfer.files[0];
            fileInput.files = e.dataTransfer.files;
            handleFile(file);
        }
    });
    fileInput.addEventListener("change", () => {
        if (fileInput.files.length > 0) {
            handleFile(fileInput.files[0]);
        }
    });

    resetImageBtn.addEventListener("click", () => {
        previewContainer.classList.add("hidden");
        resetImageBtn.classList.add("hidden");
        previewImage.src = "";
        uploadBox.classList.remove("hidden");
        fileInput.value = "";
    });

    // Rating
    reelSlots.forEach((slot, index) => {
        slot.addEventListener('click', () => {
            const value = slot.dataset.value;
            ratingInput.value = value;
            reelSlots.forEach(s => s.classList.remove('filled'));
            for (let i = 0; i < value; i++) {
                reelSlots[i].classList.add('filled');
            }
        });

        slot.addEventListener('mouseover', () => {
            reelSlots.forEach((s, i) => {
                s.classList.toggle('hovered', i <= index);
            });
        });

        slot.addEventListener('mouseleave', () => {
            reelSlots.forEach(s => s.classList.remove('hovered'));
        });
    });

    // Reset everything when modal closes or opens
    const clearPostModal = () => {
        // Reset radio
        uploadRadio.checked = true;
        posterRadio.checked = false;
        toggleUploadBox();

        // Reset image preview
        previewImage.src = "";
        fileInput.value = "";
        previewContainer.classList.add("hidden");
        resetImageBtn.classList.add("hidden");

        // Reset rating
        reelSlots.forEach(slot => slot.classList.remove('filled', 'hovered'));
        ratingInput.value = '';

        // Reset dropdown
        dropdownSelected.textContent = "Select Movie From Watchlist";
        posterSelector.value = "";
        dropdownOptions.style.display = "none";

        // Clear title/comments
        document.getElementById("postTitle").value = "";
        document.getElementById("postBody").value = "";
    };

    modal.addEventListener('hidden.bs.modal', clearPostModal);
    modal.addEventListener('show.bs.modal', clearPostModal);

    // Toggling image source
    uploadRadio.addEventListener("change", toggleUploadBox);
    posterRadio.addEventListener("change", toggleUploadBox);
    toggleUploadBox();

    fetchWatchlist();
});



// Show post details in the modal
function showPostDetails(postId) {
    // Find the post details for the given postId (you can get this from your post data)
    const post = posts.find(post => post.id === postId);

    // Populate modal with post data
    if (post) {
        document.getElementById('postDetailCover').src = "../../resources/img/" + post.cover;
        document.getElementById('postDetailTitle').innerText = post.title;
        document.getElementById('postDetailReview').innerText = 'Review: ' + post.review;
        document.getElementById('postDetailDescription').innerText = 'Description: ' + post.description;
        document.getElementById('postDetailWhereToWatch').innerText = 'Where to Watch: ' + post.whereToWatch;
    }
}



</script>