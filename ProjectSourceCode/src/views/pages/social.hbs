<style>
  .post-card {
    display: flex;
    flex-direction: column;
    height: 100%;
    min-height: 550px; 
  }

  .post-card .card-body {
    flex-grow: 1;
    overflow-y: auto;
  }

  /* Optional: Smooth scroll and scrollbar style */
  .post-card .card-body::-webkit-scrollbar {
    width: 6px;
  }

  .post-card .card-body::-webkit-scrollbar-thumb {
    background-color: #555;
    border-radius: 4px;
  }

  .post-card .card-body::-webkit-scrollbar-track {
    background-color: transparent;
  }
</style>


{{> nav}}
<div class="container mt-5 pt-5">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">

  <div class="row justify-content-between">
    <div class="col-4">
      <h1 class="friends-post-title">Friends Posts</h1>
    </div>
    <div class="col-4 text-end">
      <a class="btn-social" href="/findfriends" style="text-decoration: none; color: white;">Find Friends</a>
    </div>
  </div>

  <div id="movie-container" class="row">
    {{#each posts}}
    <div class="col-md-6 col-lg-3 mb-4">
      <div class="card post-card bg-dark text-light rounded shadow-sm" style="border: 1px solid #444;">
        <!-- Header: User Info -->
        <div class="card-header d-flex align-items-center justify-content-between border-bottom border-secondary bg-dark">
          <div class="d-flex align-items-center">
            <img src="../../resources/img/{{icon}}" alt="Profile"
       style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;" class="me-2">
            <strong class="text-light">@{{user}}</strong>
          </div>
        </div>

        <!-- Image -->
        <div class="ratio ratio-1x1" style="overflow: hidden;">
          <img src="{{cover}}" alt="{{title}}" class="w-100 h-100" style="object-fit: cover;">
        </div>

        <!-- Content Body -->
        <div class="card-body d-flex flex-column">
          <p class="card-text mb-2"><strong>{{user}}:</strong> {{title}}</p>
          <p class="card-text mb-1"><strong>Movie Title:</strong> {{movietitle}}</p>
          <p class="card-text mb-1">
            <strong>Movie Description:</strong> 
            <span class="movie-description-preview">
              {{truncate moviedescription 100}}...
              <a href="#" 
                  class="read-more-link" 
                  data-bs-toggle="modal" 
                  data-bs-target="#movieDescriptionModal"
                  data-title="{{movietitle}}"
                  data-description="{{moviedescription}}"
                  data-cover="{{cover}}">
                  Read more
              </a>
            </span>
          </p>
          <p class="card-text mb-1"><strong>Review:</strong> {{review}}</p>      
          <p class="card-text mb-2"><strong>Where to Watch:</strong> {{where_to_watch}}</p>

          <div class="mt-auto pt-2 border-top border-secondary">
            <!-- ❤️ Like Button -->
            <button class="btn heart-button" data-post-id="{{id}}" aria-label="Like">
              <i class="bi {{#if liked}}bi-heart-fill{{else}}bi-heart{{/if}}" style="color: white;"></i>
              <span class="like-count ms-1" style="color: white;">{{like_count}}</span>
            </button>

            <!-- ➕ Add to Watchlist Button -->
            <form id="add-to-watchlist-form-{{id}}" action="/add-to-watchlist" method="POST" class="d-inline">
              <input type="hidden" name="title" value="{{movietitle}}">
              <input type="hidden" name="description" value="{{moviedescription}}">
              <input type="hidden" name="picture" value="{{cover}}">
              <input type="hidden" name="source" value="social">
              <button type="submit" class="btn add-to-watchlist-btn" aria-label="Add to Watchlist">
                <i class="bi bi-plus-circle" style="color: white;"></i>
              </button>
            </form>

            <!-- View Comments Button -->
            <button 
              class="btn btn-link text-light p-0 mt-2 view-comments-btn" 
              data-post-id="{{id}}" 
              data-bs-toggle="modal" 
              data-bs-target="#commentsModal">
              View all comments
            </button>

            <!-- 💬 Comment Form -->
            <form action="/api/posts/{{id}}/comment" method="POST" class="comment-form mt-2">
              <input type="text" name="comment" class="form-control comment-input" placeholder="Add a comment..."
                required>
              <button type="submit" class="btn btn-sm btn-primary">Comment</button>
            </form>
          </div>
        </div>
      </div>
    </div>
    {{/each}}
  </div>
    <br>
  <div id="loading" class="text-center mt-4" style="display: none;">
    <p>Loading more posts...</p>
  </div>
    <br>
</div>

<!-- Comments Modal -->
<div class="modal fade" id="commentsModal" tabindex="-1" aria-labelledby="commentsModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-scrollable modal-lg">
    <div class="modal-content bg-dark text-light">
      <div class="modal-header">
        <h5 class="modal-title" id="commentsModalLabel">Comments</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="commentsModalBody">
        <p>Loading comments...</p>
      </div>
      <div class="modal-footer">
        <form id="addCommentForm" class="w-100 d-flex" data-post-id="">
          <input type="text" name="comment" class="form-control me-2" id="newCommentText" placeholder="Add a comment..." required>
          <button type="submit" class="btn btn-primary">Comment</button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Movie Description Modal -->
<div class="modal fade" id="movieDescriptionModal" tabindex="-1" aria-labelledby="movieDescriptionModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg modal-dialog-centered">
    <div class="modal-content bg-dark text-light">
      <div class="modal-header">
        <h5 class="modal-title" id="movieDescriptionModalLabel">Movie Details</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <div class="d-flex flex-column flex-md-row gap-4">
          <img id="modalMovieCover" src="" alt="Movie Poster" class="img-fluid rounded" style="max-width: 250px;">
          <div>
            <h5 id="modalMovieTitle"></h5>
            <p id="modalMovieDescription" class="mt-2"></p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="watchlistModal" tabindex="-1" aria-labelledby="watchlistModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content bg-dark text-white">
      <div class="modal-header">
        <h5 class="modal-title" id="watchlistModalLabel">Watchlist</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="watchlistModalBody">
        <!-- Message will load here -->
      </div>
    </div>
  </div>
</div>



  <script>
  let currentPage = 1;
  let isLoading = false;
  let hasMorePosts = true;

  window.addEventListener('scroll', async () => {
    const { scrollTop, scrollHeight, clientHeight } = document.documentElement;
    if (!isLoading && hasMorePosts && scrollTop + clientHeight >= scrollHeight - 10) {
      isLoading = true;
      currentPage++;
      document.getElementById('loading').style.display = 'block';
      try {
        const res = await fetch(`/load-more?page=${currentPage}`);
        const data = await res.json();
        if (data.posts && data.posts.length > 0) {
          const container = document.getElementById("movie-container");
          data.posts.forEach(post => {
            const shortDescription = post.moviedescription.length > 50 ? post.moviedescription.slice(0, 50) + '...' : post.moviedescription;
            function escapeQuotes(text) {
              return text.replace(/"/g, "&quot;").replace(/'/g, "&#39;");
            }
            const postHtml = `
              <div class="col-md-6 col-lg-3 mb-4 d-flex">
                <div class="card post-card bg-dark text-light rounded shadow-sm w-100" style="border: 1px solid #444;">
                  <div class="card-header d-flex align-items-center justify-content-between border-bottom border-secondary bg-dark">
                    <div class="d-flex align-items-center">
                      <img src="../../resources/img/${post.icon}" alt="Profile"
       style="width: 40px; height: 40px; border-radius: 50%; object-fit: cover;" class="me-2">
                      <strong class="text-light">@${post.user}</strong>
                    </div>
                  </div>
                  <div class="ratio ratio-1x1" style="overflow: hidden;">
                    <img src="${post.cover}" alt="${post.title}" class="w-100 h-100" style="object-fit: cover;">
                  </div>
                  <div class="card-body d-flex flex-column">
                    <p class="card-text mb-2"><strong>${post.user}:</strong> ${post.title}</p>
                    <p class="card-text mb-1"><strong>Movie Title:</strong> ${post.movietitle}</p>
                    <p class="card-text mb-1">
                      <strong>Movie Description:</strong> 
                      <span class="movie-description-preview">
                        ${shortDescription}...
                        <a href="#" 
                            class="read-more-link" 
                            data-bs-toggle="modal" 
                            data-bs-target="#movieDescriptionModal"
                            data-title="${post.movietitle}"
                            data-description="${escapeQuotes(post.moviedescription)}"
                            data-cover="${post.cover}">
                            Read more
                        </a>
                      </span>
                    </p>
                    <p class="card-text mb-1"><strong>Review:</strong> ${post.review}</p>      
                    <p class="card-text mb-2"><strong>Where to Watch:</strong> ${post.where_to_watch}</p>

                    <div class="mt-auto pt-2 border-top border-secondary">

                      <button class="btn heart-button" data-post-id="${post.id}" aria-label="Like">
                        <i class="bi ${post.liked ? 'bi-heart-fill' : 'bi-heart'}" style="color: white;"></i>
                        <span class="like-count ms-1" style="color: white;">${post.like_count}</span>
                      </button>

                      <form id="add-to-watchlist-form-${post.id}" action="/add-to-watchlist" method="POST" class="d-inline">
                        <input type="hidden" name="title" value="${post.movietitle}">
                        <input type="hidden" name="description" value="${escapeAttribute(post.moviedescription)}">
                        <input type="hidden" name="picture" value="${post.cover}">
                        <input type="hidden" name="source" value="social">
                        <button type="submit" class="btn add-to-watchlist-btn" data-post-id="${post.id}" aria-label="Add to Watchlist">
                          <i class="bi bi-plus-circle" style="color: white;"></i>
                        </button>
                      </form>

                      <button 
                        class="btn btn-link text-light p-0 mt-2 view-comments-btn" 
                        data-post-id="${post.id}" 
                        data-bs-toggle="modal" 
                        data-bs-target="#commentsModal">
                        View all comments
                      </button>

                      <form action="/api/posts/${post.id}/comment" method="POST" class="comment-form mt-2">
                        <input type="text" name="comment" class="form-control comment-input" placeholder="Add a comment..." required>
                        <button type="submit" class="btn btn-sm btn-primary">Comment</button>
                      </form>
                    </div>
                  </div>
                </div>
              </div>`;
            container.insertAdjacentHTML("beforeend", postHtml);
            // Attach event listener for the Add to Watchlist button
            const addButton = document.querySelector(`#add-to-watchlist-form-${post.id} .add-to-watchlist-btn`);
            addButton.addEventListener('click', async (event) => {
              event.preventDefault();
              const form = addButton.closest('form');
            
              // Decode HTML entities in description before sending
              const descriptionField = form.querySelector('[name="description"]');
              if (descriptionField) {
                const textarea = document.createElement('textarea');
                textarea.innerHTML = descriptionField.value;
                descriptionField.value = textarea.value;
              }
            
              const formData = new FormData(form);
              const data = Object.fromEntries(formData.entries());
            
              try {
                const response = await fetch(form.action, {
                  method: form.method,
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(data)
                });
            
                const result = await response.json();
                if (result.success) {
                  showWatchlistModal('Movie added to your watchlist!');
                } else {
                  showWatchlistModal(result.error || 'An error occurred');
                }
              } catch (error) {
                console.error('Watchlist add error:', error);
                showWatchlistModal('Failed to connect to server');
              }
            });
            // Fix descriptions with special characters
            function escapeAttribute(text) {
              return text
                .replace(/&/g, '&amp;')
                .replace(/"/g, '&quot;')
                .replace(/'/g, '&#39;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;');
            }
          });
          attachLikeListeners();
          attachCommentListeners();
          attachViewCommentsListeners();
          attachReadMoreToggles();
        } else {
          hasMorePosts = false;
          document.getElementById('loading').innerHTML = "<p>No more posts to show.</p>";
        }
      } catch (err) {
        console.error("Error loading more posts:", err);
      } finally {
        if (hasMorePosts) document.getElementById('loading').style.display = 'none';
        isLoading = false;
      }
    }
  });

  function handleDescriptionToggle(descriptionEl) {
    const fullText = descriptionEl.textContent;
    if (fullText.length > 100) {
      const truncatedText = fullText.substring(0, 100) + '... ';
      const toggleLink = document.createElement('a');
      toggleLink.href = '#';
      toggleLink.textContent = 'Read more';
      toggleLink.classList.add('text-primary', 'read-more-toggle');

      let isTruncated = true;
      descriptionEl.textContent = truncatedText;
      descriptionEl.appendChild(toggleLink);

      toggleLink.addEventListener('click', (e) => {
        e.preventDefault();
        isTruncated = !isTruncated;
        descriptionEl.textContent = isTruncated ? truncatedText : fullText;
        toggleLink.textContent = isTruncated ? 'Read more' : 'Show less';
        descriptionEl.appendChild(toggleLink);
      });
    }
  }

  function attachReadMoreToggles() {
    document.querySelectorAll('.movie-description').forEach(desc => {
      handleDescriptionToggle(desc);
    });
  }

  function attachLikeListeners() {
    document.querySelectorAll('.heart-button').forEach(button => {
      const cloned = button.cloneNode(true);
      button.replaceWith(cloned);

      cloned.addEventListener('click', async () => {
        const postId = cloned.dataset.postId;
        try {
          const res = await fetch(`/api/posts/${postId}/like`, { method: 'POST' });
          if (res.ok) {
            const data = await res.json();
            const icon = cloned.querySelector('i');
            const countSpan = cloned.querySelector('.like-count');

            icon.classList.toggle('bi-heart');
            icon.classList.toggle('bi-heart-fill');
            if (countSpan) countSpan.textContent = data.likeCount;
          } else {
            alert("Failed to like/unlike.");
          }
        } catch (err) {
          console.error("Like toggle error:", err);
        }
      });
    });
  }

  function attachCommentListeners() {
    document.querySelectorAll('.comment-form, #addCommentForm').forEach(form => {
      const cloned = form.cloneNode(true);
      form.replaceWith(cloned);

      cloned.addEventListener('submit', async (e) => {
        e.preventDefault();

        const formData = new FormData(cloned);
        const comment = formData.get('comment') || document.getElementById('newCommentText')?.value;
        const action = cloned.getAttribute('action');
        const postId = action?.split('/')[3]; // /api/posts/:id/comment

        try {
          const res = await fetch(action, {
            method: 'POST',
            body: new URLSearchParams({ comment }),
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded'
            }
          });

          if (res.ok) {
            // Clear the comment box
            if (cloned.querySelector('input')) {
              cloned.querySelector('input').value = '';
            } else {
              document.getElementById('newCommentText').value = '';
            }

            // ✅ Only refresh comments
            await loadCommentsIntoModal(postId);
          } else {
            alert("Failed to submit comment.");
          }
        } catch (err) {
          console.error("Comment submission error:", err);
        }
      });
    });
  }

  function attachViewCommentsListeners() {
    document.querySelectorAll('.view-comments-btn').forEach(button => {
      button.addEventListener('click', async () => {
        const postId = button.dataset.postId;
        const modalBody = document.getElementById('commentsModalBody');
        modalBody.innerHTML = "<p>Loading comments...</p>";

        // Set form action dynamically in modal
        const modalForm = document.getElementById('addCommentForm');
      modalForm.setAttribute('action', `/api/posts/${postId}/comment`);

        try {
          const res = await fetch(`/api/posts/${postId}/comments`);
          const data = await res.json();

          if (data.comments.length === 0) {
            modalBody.innerHTML = "<p>No comments yet.</p>";
          } else {
            modalBody.innerHTML = data.comments.map(comment => `
              <div class="mb-2 border-bottom pb-2">
                <strong>@${comment.username}</strong><br>
                <span>${comment.comment}</span><br>
                <small class="text-muted">${new Date(comment.created_at).toLocaleString()}</small>
              </div>
            `).join('');
          }
        } catch (err) {
          console.error("Failed to load comments:", err);
          modalBody.innerHTML = "<p class='text-danger'>Failed to load comments.</p>";
        }
      });
    });
  }

  async function loadCommentsIntoModal(postId) {
    const modalBody = document.getElementById('commentsModalBody');

    try {
      const res = await fetch(`/api/posts/${postId}/comments`);
      const data = await res.json();

      if (data.comments.length === 0) {
        modalBody.innerHTML = "<p>No comments yet.</p>";
      } else {
        modalBody.innerHTML = data.comments.map(comment => `
        <div class="mb-2 border-bottom pb-2">
          <strong>@${comment.username}</strong><br>
          <span>${comment.comment}</span><br>
          <small class="text-muted">${new Date(comment.created_at).toLocaleString()}</small>
        </div>
      `).join('');
      }
    } catch (err) {
      console.error("Failed to load comments:", err);
      modalBody.innerHTML = "<p class='text-danger'>Failed to load comments.</p>";
    }
  }

  // Initial load
  document.addEventListener('DOMContentLoaded', () => {
    attachLikeListeners();
    attachCommentListeners();
    attachViewCommentsListeners();
    attachReadMoreToggles();
  });

  function escapeHtml(text) {
    const element = document.createElement('div');
    if (text) {
      element.innerText = text;
      element.textContent = text;
    }
    return element.innerHTML;
  }

  document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('movie-container').addEventListener('click', (e) => {
      if (e.target && e.target.classList.contains('read-more-link')) {
        const link = e.target;
        const title = link.dataset.title;
        const description = link.dataset.description;
        const cover = link.dataset.cover;

        // Set modal content
        document.getElementById('modalMovieTitle').textContent = title;
        document.getElementById('modalMovieDescription').innerHTML = description;
        document.getElementById('modalMovieCover').src = cover;
        document.getElementById('modalMovieCover').alt = title + ' Poster';
      }
    });
  });

  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.read-more-link').forEach(link => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const title = link.dataset.title;
        const description = link.dataset.description;
        const cover = link.dataset.cover;
        const escapedDescription = escapeHtml(description);

        document.getElementById('modalMovieTitle').textContent = title;
        document.getElementById('modalMovieDescription').textContent = description;
        document.getElementById('modalMovieCover').src = cover;
        document.getElementById('modalMovieCover').alt = title + ' Poster';
      });
    });
  });

  document.addEventListener('DOMContentLoaded', function () {
    document.querySelectorAll('.add-to-watchlist-btn').forEach(button => {
      button.addEventListener('click', async function (event) {
        event.preventDefault();

        const form = event.target.closest('form');
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
          const response = await fetch(form.action, {
            method: form.method,
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
          });

          const result = await response.json();

          if (result.success) {
            showWatchlistModal('Movie added to your watchlist!');
          } else {
            showWatchlistModal(result.error || 'An error occurred');
          }
        } catch (error) {
          console.error('Watchlist add error:', error);
          showWatchlistModal('Failed to connect to server');
        }
      });
    });
  });

  function showWatchlistModal(message) {
    const modalBody = document.getElementById('watchlistModalBody');
    modalBody.textContent = message;

    const modal = new bootstrap.Modal(document.getElementById('watchlistModal'));
    modal.show();
  }

</script>