{{> nav}}
<script src="../resources/js/socialScript.js"></script>

<div class="container-fluid explore-container">
  <div class="row">
    <!-- Left Sidebar for Filters -->
    <div class="col-lg-2 filter-sidebar">
      <h3 class="sidebar-title">Filter By</h3>
      
      <div class="filter-section">
        <h5 class="filter-heading">Newest</h5>
        <div class="form-check">
          <input class="form-check-input" type="checkbox" id="newestFilter">
          <label class="form-check-label" for="newestFilter">Show newest first</label>
        </div>
      </div>
      
      <div class="filter-section">
        <h5 class="filter-heading">Genre</h5>
        <div class="genre-filters">
          <div class="genre-item">
            <input class="form-check-input genre-checkbox" type="checkbox" id="actionFilter" value="action">
            <label class="form-check-label" for="actionFilter">Action</label>
          </div>
          
          <div class="genre-item">
            <input class="form-check-input genre-checkbox" type="checkbox" id="comedyFilter" value="comedy">
            <label class="form-check-label" for="comedyFilter">Comedy</label>
          </div>
          
          <div class="genre-item">
            <input class="form-check-input genre-checkbox" type="checkbox" id="dramaFilter" value="drama">
            <label class="form-check-label" for="dramaFilter">Drama</label>
          </div>
          
          <div class="genre-item">
            <input class="form-check-input genre-checkbox" type="checkbox" id="fantasyFilter" value="fantasy">
            <label class="form-check-label" for="fantasyFilter">Fantasy</label>
          </div>
          
          <div class="genre-item">
            <input class="form-check-input genre-checkbox" type="checkbox" id="horrorFilter" value="horror">
            <label class="form-check-label" for="horrorFilter">Horror</label>
          </div>
          
          <div class="genre-item">
            <input class="form-check-input genre-checkbox" type="checkbox" id="mysteryFilter" value="mystery">
            <label class="form-check-label" for="mysteryFilter">Mystery</label>
          </div>
          
          <div class="genre-item">
            <input class="form-check-input genre-checkbox" type="checkbox" id="romanceFilter" value="romance">
            <label class="form-check-label" for="romanceFilter">Romance</label>
          </div>
          
          <div class="genre-item">
            <input class="form-check-input genre-checkbox" type="checkbox" id="scifiFilter" value="sci-fi">
            <label class="form-check-label" for="scifiFilter">Sci-fi</label>
          </div>
          
          <div class="genre-item">
            <input class="form-check-input genre-checkbox" type="checkbox" id="thrillerFilter" value="thriller">
            <label class="form-check-label" for="thrillerFilter">Thriller</label>
          </div>
          
          <div class="genre-item">
            <input class="form-check-input genre-checkbox" type="checkbox" id="westernFilter" value="western">
            <label class="form-check-label" for="westernFilter">Western</label>
          </div>
        </div>
      </div>
      
      <div class="filter-section">
        <h5 class="filter-heading">Year</h5>
        <select id="yearFilter" class="form-select filter-select">
          <option selected value="">All Years</option>
          <option value="2025">2025</option>
          <option value="2024">2024</option>
          <option value="2023">2023</option>
          <option value="2022">2022</option>
          <option value="2021">2021</option>
          <option value="2020">2020</option>
          <option value="older">Before 2020</option>
        </select>
      </div>
      
      <div class="filter-section">
        <h5 class="filter-heading">Type</h5>
        <select id="typeFilter" class="form-select filter-select">
          <option selected value="">All Types</option>
          <option value="movie">Movies</option>
          <option value="series">TV Series</option>
          <option value="episode">Episodes</option>
        </select>
      </div>
      
      <div class="filter-section">
        <h5 class="filter-heading">Rating</h5>
        <select id="ratingFilter" class="form-select filter-select">
          <option selected value="">Any Rating</option>
          <option value="9">9+</option>
          <option value="8">8+</option>
          <option value="7">7+</option>
          <option value="6">6+</option>
          <option value="5">5+</option>
        </select>
      </div>
      
      <div id="activeFiltersDisplay" class="active-filters mt-3 mb-3" style="display: none;">
        <h6 class="filter-subheading">Active Filters:</h6>
        <div id="activeFiltersList" class="active-filters-list"></div>
      </div>
      
      <button id="applyFiltersBtn" class="btn btn-primary apply-filters-btn">
        <i class="bi bi-funnel-fill me-1"></i> Apply Filters
      </button>
      
      <button id="clearFiltersBtn" class="btn btn-outline-secondary clear-filters-btn mt-2" style="display: none;">
        <i class="bi bi-x-circle me-1"></i> Clear Filters
      </button>
    </div>
    
    <!-- Main Content Area -->
    <div class="col-lg-10 main-content">
      <div class="content-wrapper">
        <h1 class="explore-title">Explore Movies</h1>
        
        <!-- Search section -->
        <div class="search-container bg-white p-4 rounded-4 shadow-sm mb-4 animate-fade-in">
          <form id="searchForm" class="mb-3">
            <div class="input-group">
              <input 
                type="text" 
                id="searchInput" 
                class="form-control"
                placeholder="Search movies..." 
                aria-label="Search movies">
              <button class="btn search-btn" type="submit">
                <i class="bi bi-search me-1"></i> Search
              </button>
            </div>
          </form>
          
          <div class="d-flex justify-content-between align-items-center">
            <button id="advancedSearchToggle" class="btn btn-outline-secondary">
              <i class="bi bi-sliders me-1"></i> Advanced Filters
            </button>
          </div>
          
          <div id="advancedSearchOptions" class="mt-3 animate-slide" style="display: none; max-height: 0; overflow: hidden;">
            <div class="row g-3">
              <div class="col-md-4">
                <label for="directorFilter" class="form-label">Director</label>
                <input type="text" id="directorFilter" class="form-control" placeholder="Director name">
              </div>
              <div class="col-md-4">
                <label for="actorFilter" class="form-label">Actor</label>
                <input type="text" id="actorFilter" class="form-control" placeholder="Actor name">
              </div>
              <div class="col-md-4">
                <label for="advancedRatingFilter" class="form-label">Minimum Rating</label>
                <select id="advancedRatingFilter" class="form-select">
                  <option selected value="">Any Rating</option>
                  <option value="9">9+</option>
                  <option value="8">8+</option>
                  <option value="7">7+</option>
                  <option value="6">6+</option>
                  <option value="5">5+</option>
                </select>
              </div>
            </div>
            <div class="text-end mt-3">
              <button id="advancedApplyFiltersBtn" class="btn btn-primary apply-filters-btn">
                <i class="bi bi-funnel-fill me-1"></i> Apply Filters
              </button>
            </div>
          </div>
        </div>
        
        <!-- Popular searches / quick filters -->
        <div class="quick-filters mb-4 animate-fade-in" style="animation-delay: 0.1s;">
          <h5 class="mb-3">Popular Searches</h5>
          <div class="d-flex flex-wrap gap-2">
            <button class="btn popular-search-pill" data-search="Top Gun: Maverick">Top Gun: Maverick</button>
            <button class="btn popular-search-pill" data-search="Oppenheimer">Oppenheimer</button>
            <button class="btn popular-search-pill" data-search="Barbie">Barbie</button>
            <button class="btn popular-search-pill" data-search="Dune">Dune</button>
            <button class="btn popular-search-pill" data-search="Inside Out">Inside Out</button>
            <button class="btn popular-search-pill" data-search="Star Wars">Star Wars</button>
          </div>
        </div>
        
        <!-- Results section -->
        <div id="resultsSection" class="results-container d-none animate-fade-in">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h2 class="results-title mb-0">Search Results</h2>
            <div class="sort-by d-flex align-items-center">
              <span class="me-2">Sort by:</span>
              <select id="sortOptions" class="form-select">
                <option value="relevance">Relevance</option>
                <option value="year">Year</option>
                <option value="title">Title</option>
                <option value="rating">Rating</option>
              </select>
            </div>
          </div>
          
          <!-- Back to trending button -->
          <div id="backToTrendingContainer" class="mb-3">
            <button id="backToTrendingBtn" class="btn btn-outline-secondary">
              <i class="bi bi-arrow-left me-1"></i> Back to Trending
            </button>
          </div>
          
          <div id="resultsContainer" class="row row-cols-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-4">
            <!-- Search results will be inserted here -->
          </div>
          
          <div id="loadingIndicator" class="text-center my-5 d-none pulse-animation">
            <div class="spinner" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-3">Searching for movies...</p>
          </div>
          
          <div id="noResultsMessage" class="text-center py-5 d-none animate-fade-in">
            <div class="no-results-icon mb-3">
              <i class="bi bi-film"></i>
            </div>
            <h3>No movies found</h3>
            <p class="text-muted">Try a different search term or adjust your filters</p>
          </div>
          
          <div class="text-center mt-4 mb-5">
            <button id="loadMoreBtn" class="btn btn-outline-primary d-none">
              Load More Results
            </button>
          </div>
        </div>
        
        <!-- Initial state / trending movies -->
        <div id="trendingSection" class="animate-fade-in" style="animation-delay: 0.2s;">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h2 class="section-title mb-0">Trending Now</h2>
            <div class="trending-tabs">
              <button class="tab-btn active" data-tab="popular">Popular</button>
              <button class="tab-btn" data-tab="latest">Latest</button>
            </div>
          </div>
          
          <div id="trendingContainer" class="row row-cols-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-4">
            <!-- Trending movies will be loaded here -->
            <div class="col">
              <div class="movie-card skeleton">
                <div class="movie-poster-placeholder"></div>
                <div class="movie-info-placeholder">
                  <div class="placeholder-title"></div>
                  <div class="placeholder-year"></div>
                </div>
              </div>
            </div>
            <div class="col">
              <div class="movie-card skeleton">
                <div class="movie-poster-placeholder"></div>
                <div class="movie-info-placeholder">
                  <div class="placeholder-title"></div>
                  <div class="placeholder-year"></div>
                </div>
              </div>
            </div>
            <div class="col">
              <div class="movie-card skeleton">
                <div class="movie-poster-placeholder"></div>
                <div class="movie-info-placeholder">
                  <div class="placeholder-title"></div>
                  <div class="placeholder-year"></div>
                </div>
              </div>
            </div>
            <div class="col">
              <div class="movie-card skeleton">
                <div class="movie-poster-placeholder"></div>
                <div class="movie-info-placeholder">
                  <div class="placeholder-title"></div>
                  <div class="placeholder-year"></div>
                </div>
              </div>
            </div>
            <div class="col">
              <div class="movie-card skeleton">
                <div class="movie-poster-placeholder"></div>
                <div class="movie-info-placeholder">
                  <div class="placeholder-title"></div>
                  <div class="placeholder-year"></div>
                </div>
              </div>
            </div>
          </div>
          
          <!-- The same structure can be used to display your actual posts from the first snippet -->
          <div id="watchlist-items" class="row row-cols-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5 g-4 mt-4 d-none">
            {{#each posts}}
            <div class="col animate-fade-in">
              <div class="movie-card">
                <div class="poster-container">
                  <img src="{{cover}}" alt="{{title}}" class="movie-poster">
                  <button class="watchlist-btn" title="Add to watchlist" onclick="addToWatchlist('{{title}}', '{{cover}}', '{{whereToWatch}}')">
                    <i class="bi bi-plus-lg"></i>
                  </button>
                </div>
                <div class="movie-info">
                  <div class="movie-title">{{title}}</div>
                  <div class="movie-year-rating">
                    <div class="movie-year">{{genre}}</div>
                    <div class="movie-rating">
                      <i class="bi bi-star-fill"></i> {{rating}}
                    </div>
                  </div>
                  <p class="movie-description">{{description}}</p>
                  <p class="movie-watch-on">Watch on: {{whereToWatch}}</p>
                </div>
              </div>
            </div>
            {{/each}}
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Purple color scheme based on existing app */
  :root {
    --primary-purple: #5F4B8B;
    --secondary-purple: #C4C3E3;
    --light-purple: #E9E8F7;
    --dark-purple: #4a3a6d;
    --accent-purple: #9683C3;
  }
  
  body {
    background-color: #121212;
  }
  
  /* Explore container layout */
  .explore-container {
    padding: 20px;
    width: 100%;
    max-width: 1920px;
    margin: 0 auto;
  }
  
  /* Left sidebar styles */
  .filter-sidebar {
    background-color: #1E1E1E;
    border-radius: 12px;
    padding: 20px;
    position: sticky;
    top: 85px;
    height: calc(100vh - 100px);
    overflow-y: auto;
  }
  
  .sidebar-title, .filter-heading {
    color: #fff;
    margin-bottom: 20px;
  }
  
  .filter-section {
    margin-bottom: 30px;
  }
  
  .filter-heading {
    border-bottom: 1px solid #333;
    padding-bottom: 8px;
    font-size: 1.1rem;
  }

  .filter-subheading {
    color: #ddd;
    font-size: 1rem;
    margin-bottom: 10px;
  }
  
  .genre-filters {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }
  
  .genre-item {
    display: flex;
    align-items: center;
  }
  
  .form-check-label {
    color: #fff;
    margin-left: 8px;
  }
  
  .form-check-input {
    cursor: pointer;
  }
  
  .form-check-input:checked {
    background-color: var(--primary-purple);
    border-color: var(--primary-purple);
  }
  
  .filter-select {
    background-color: #2A2A2A;
    color: #fff;
    border-color: #444;
  }
  
  .filter-select:focus {
    box-shadow: 0 0 0 0.25rem rgba(150, 131, 195, 0.25);
    border-color: var(--accent-purple);
    background-color: #2A2A2A;
    color: #fff;
  }
  
  .apply-filters-btn {
    background-color: var(--primary-purple);
    border: none;
    width: 100%;
    transition: all 0.3s;
  }
  
  .apply-filters-btn:hover {
    background-color: var(--dark-purple);
    transform: translateY(-2px);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  }

  .clear-filters-btn {
    width: 100%;
    color: #ddd;
    border-color: #444;
    transition: all 0.3s;
  }

  .clear-filters-btn:hover {
    background-color: #444;
    color: white;
  }

  /* Active filters display */
  .active-filters {
    background-color: #2A2A2A;
    padding: 10px;
    border-radius: 8px;
    margin-bottom: 15px;
  }

  .active-filter-tag {
    display: inline-block;
    background-color: var(--primary-purple);
    color: white;
    padding: 4px 10px;
    border-radius: 20px;
    margin: 3px;
    font-size: 0.8rem;
  }

  .active-filter-tag .filter-remove {
    cursor: pointer;
    margin-left: 5px;
  }
  
  /* Main content styles */
  .main-content {
    padding: 0 20px;
    flex-grow: 1; /* Add this to make it take up available vertical space */
    margin-bottom: 60px; /* Add a margin at the bottom for the fixed footer */
  }
  
  .content-wrapper {
    background-color: #1E1E1E;
    border-radius: 12px;
    padding: 25px;
  }
  
  .explore-title {
    color: #fff;
    margin-bottom: 25px;
    text-align: center;
    font-weight: 700;
    letter-spacing: -0.5px;
  }
  
  /* Animations */
  .animate-fade-in {
    animation: fadeIn 0.5s ease forwards;
    opacity: 0;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .animate-slide {
    transition: max-height 0.3s ease, padding 0.3s ease, opacity 0.3s ease;
    opacity: 0;
  }
  
  .animate-slide.show {
    opacity: 1;
    max-height: 300px !important;
    padding: 15px;
    border-top: 1px solid #333;
  }
  
  /* Pulse animation for loading */
  .pulse-animation {
    animation: pulse 1.5s infinite;
  }
  
  @keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }
  
  /* Custom spinner */
  .spinner {
    display: inline-block;
    width: 50px;
    height: 50px;
    border: 3px solid rgba(95, 75, 139, 0.3);
    border-radius: 50%;
    border-top-color: var(--primary-purple);
    animation: spin 1s ease-in-out infinite;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  /* No results icon */
  .no-results-icon {
    font-size: 3rem;
    color: var(--primary-purple);
    opacity: 0.5;
  }
  
  /* Titles */
  .section-title {
    color: #fff;
    font-weight: 600;
    letter-spacing: -0.5px;
    margin-top: 40px;
  }
  
  /* Search elements */
  .search-container {
    background-color: #2A2A2A !important;
    border-radius: 12px;
    transition: box-shadow 0.3s ease;
  }
  
  .search-container:hover {
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
  }
  
  .search-btn {
    background-color: var(--primary-purple);
    color: white;
    border-top-right-radius: 8px;
    border-bottom-right-radius: 8px;
    padding: 8px 20px;
    transition: background-color 0.2s ease;
  }
  
  .search-btn:hover {
    background-color: var(--dark-purple);
    color: white;
  }
  
  #searchInput {
    background-color: #333;
    border-color: #444;
    color: #fff;
  }
  
  #searchInput::placeholder {
    color: #999;
  }
  
  #searchInput:focus {
    background-color: #333;
    color: #fff;
    box-shadow: none;
    border-color: var(--accent-purple);
  }
  
  #advancedSearchToggle {
    color: #ddd;
    border-color: #555;
  }
  
  #advancedSearchToggle:hover {
    background-color: var(--dark-purple);
    color: white;
    border-color: var(--accent-purple);
  }
  
  #advancedSearchOptions {
    background-color: #333;
    border-radius: 8px;
  }
  
  #advancedSearchOptions .form-label {
    color: #ddd;
  }
  
  #advancedSearchOptions .form-control, 
  #advancedSearchOptions .form-select {
    background-color: #444;
    border-color: #555;
    color: #fff;
  }
  
  /* Popular search pills */
  .popular-search-pill {
    background-color: #2A2A2A;
    color: var(--accent-purple);
    border: 1px solid var(--accent-purple);
    border-radius: 20px;
    padding: 6px 16px;
    transition: all 0.3s ease;
  }
  
  .popular-search-pill:hover {
    background-color: var(--accent-purple);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 3px 8px rgba(95, 75, 139, 0.3);
  }
  
  /* Trending tabs */
  .trending-tabs {
    display: flex;
    gap: 5px;
  }
  
  .tab-btn {
    background: none;
    border: none;
    padding: 8px 16px;
    color: #999;
    border-radius: 20px;
    font-size: 0.9rem;
    transition: all 0.2s ease;
  }
  
  .tab-btn:hover {
    color: #fff;
  }
  
  .tab-btn.active {
    background-color: var(--dark-purple);
    color: #fff;
    font-weight: 600;
  }

  /* Back to trending button */
  #backToTrendingContainer {
    margin-bottom: 15px;
  }

  #backToTrendingBtn {
    color: #ddd;
    border-color: #555;
    transition: all 0.3s ease;
  }

  #backToTrendingBtn:hover {
    background-color: var(--dark-purple);
    color: white;
    border-color: var(--accent-purple);
  }
  
  /* Movie cards */
  .movie-card {
    position: relative;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.3);
    transition: all 0.3s ease;
    cursor: pointer;
    height: 100%;
    background-color: #2A2A2A;
  }
  
  .movie-card:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 12px 20px rgba(0, 0, 0, 0.25);
  }
  
  .poster-container {
    position: relative;
    overflow: hidden;
  }
  
  .movie-poster {
    width: 100%;
    aspect-ratio: 2/3;
    object-fit: cover;
    transition: transform 0.5s ease;
  }
  
  .movie-card:hover .movie-poster {
    transform: scale(1.05);
  }
  
  .movie-info {
    padding: 15px;
    position: relative;
    background-color: #2A2A2A;
  }
  
  .movie-title {
    font-weight: 600;
    margin-bottom: 8px;
    font-size: 1rem;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    color: #fff;
    transition: color 0.2s ease;
  }
  
  .movie-card:hover .movie-title {
    color: var(--accent-purple);
  }
  
  .movie-year-rating {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 5px;
    margin-bottom: 10px;
  }
  
  .movie-year {
    color: #999;
    font-size: 0.8rem;
  }
  
  .movie-rating {
    background-color: var(--primary-purple);
    color: white;
    font-size: 0.75rem;
    padding: 3px 8px;
    border-radius: 4px;
    font-weight: 600;
    display: flex;
    align-items: center;
    transition: transform 0.2s ease;
  }
  
  .movie-card:hover .movie-rating {
    transform: scale(1.1);
  }
  
  .movie-rating i {
    color: #ffc107;
    margin-right: 3px;
    font-size: 0.85rem;
  }
  
  .movie-description {
    color: #bbb;
    font-size: 0.85rem;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    margin-bottom: 8px;
  }
  
  .movie-watch-on {
    color: #999;
    font-size: 0.8rem;
    margin-bottom: 0;
  }

  .movie-genre {
    color: #999;
    font-size: 0.8rem;
    margin-bottom: 8px;
  }
  
  .watchlist-btn {
    position: absolute;
    top: 8px;
    right: 8px;
    background-color: rgba(0, 0, 0, 0.7);
    border-radius: 50%;
    width: 35px;
    height: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    color: #fff;
    opacity: 0;
    transform: translateY(-5px);
    transition: all 0.3s ease;
    z-index: 2;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }
  
  .movie-card:hover .watchlist-btn {
    opacity: 1;
    transform: translateY(0);
  }
  
  .watchlist-btn:hover {
    background-color: var(--primary-purple);
    color: white;
    transform: scale(1.1) !important;
  }
  
  /* Skeleton loading animation */
  .movie-card.skeleton .movie-poster-placeholder {
    background: linear-gradient(110deg, #333 8%, #444 18%, #333 33%);
    background-size: 200% 100%;
    animation: shine 1.5s linear infinite;
  }
  
  @keyframes shine {
    to {
      background-position-x: -200%;
    }
  }
  
  .movie-poster-placeholder {
    background-color: #333;
    width: 100%;
    aspect-ratio: 2/3;
  }
  
  .movie-info-placeholder {
    padding: 15px;
  }
  
  .placeholder-title {
    height: 16px;
    background-color: #444;
    width: 85%;
    margin-bottom: 8px;
    border-radius: 4px;
  }
  
  .placeholder-year {
    height: 12px;
    background-color: #444;
    width: 40%;
    border-radius: 4px;
  }
  
  /* Buttons */
  #loadMoreBtn {
    color: var(--accent-purple);
    border-color: var(--accent-purple);
    border-radius: 8px;
    padding: 8px 24px;
    transition: all 0.3s ease;
  }
  
  #loadMoreBtn:hover {
    background-color: var(--primary-purple);
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(95, 75, 139, 0.3);
  }
  
  /* Sort by styles */
  .sort-by .form-select {
    background-color: #2A2A2A;
    color: #fff;
    border-color: #444;
    max-width: 120px;
  }
  
  .sort-by span {
    color: #ddd;
  }
  
  .results-title {
    color: #fff;
  }
  
  /* Responsive adjustments */
  @media (max-width: 991.98px) {
    .filter-sidebar {
      position: static;
      height: auto;
      margin-bottom: 20px;
    }
    
    .filter-section {
      margin-bottom: 20px;
    }
    
    .genre-filters {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
    }
  }
  
  @media (max-width: 767.98px) {
    .results-title {
      font-size: 1.5rem;
    }
    
    .sort-by span {
      display: none;
    }
    
    .trending-tabs {
      display: flex;
      overflow-x: auto;
      white-space: nowrap;
      padding-bottom: 5px;
      margin-left: -10px;
      width: 100%;
    }
    
    .tab-btn {
      flex: 0 0 auto;
    }
    
    .explore-title {
      font-size: 1.8rem;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Fix navbar conflict by adding top padding to the explore container
  const navbarHeight = document.querySelector('.navbar')?.offsetHeight || 80;
  document.querySelector('.explore-container').style.paddingTop = `${navbarHeight + 20}px`;
  
  // Fix filter sidebar height and scrolling
  const filterSidebar = document.querySelector('.filter-sidebar');
  const windowHeight = window.innerHeight;
  filterSidebar.style.height = `calc(${windowHeight}px - ${navbarHeight + 40}px)`;
  filterSidebar.style.overflowY = 'auto';
  
  // Variables for pagination and loading
  let page = 1;
  let isLoading = false;
  let currentQuery = '';
  let selectedGenres = [];
  let currentTab = 'popular';
  let currentMovieCache = new Map(); // Cache to avoid refetching movie details
  let hasMoreResults = true;
  let hasMoreTrending = true;
  let activeView = 'trending'; // 'trending' or 'results'
  let scrollLock = false;

  // State management for active filters
  const filterState = {
    genres: [],
    year: '',
    type: '',
    director: '',
    actor: '',
    rating: '',
    newestFirst: true,
    
    // Method to check if any filters are active
    hasActiveFilters() {
      return this.genres.length > 0 || 
             this.year !== '' || 
             this.type !== '' || 
             this.director !== '' || 
             this.actor !== '' || 
             this.rating !== '';
    },
    
    // Reset all filters
    clearAll() {
      this.genres = [];
      this.year = '';
      this.type = '';
      this.director = '';
      this.actor = '';
      this.rating = '';
      
      // Reset the UI to match the state
      document.querySelectorAll('.genre-checkbox').forEach(checkbox => {
        checkbox.checked = false;
      });
      
      document.getElementById('yearFilter').value = '';
      document.getElementById('typeFilter').value = '';
      document.getElementById('ratingFilter').value = '';
      
      if (document.getElementById('directorFilter')) {
        document.getElementById('directorFilter').value = '';
      }
      
      if (document.getElementById('actorFilter')) {
        document.getElementById('actorFilter').value = '';
      }
      
      if (document.getElementById('advancedRatingFilter')) {
        document.getElementById('advancedRatingFilter').value = '';
      }
      
      // Update UI to show no active filters
      updateActiveFiltersDisplay();
    }
  };

  // Create spinner elements
  const resultsSpinnerHTML = `
    <div id="results-spinner" class="text-center py-4 my-3" style="display: none;">
      <div class="spinner-border" role="status" style="color: var(--primary-purple);">
        <span class="visually-hidden">Loading more results...</span>
      </div>
      <p class="mt-2" style="color: var(--accent-purple);">Loading more results...</p>
    </div>
  `;
  
  const trendingSpinnerHTML = `
    <div id="trending-spinner" class="text-center py-4 my-3" style="display: none;">
      <div class="spinner-border" role="status" style="color: var(--primary-purple);">
        <span class="visually-hidden">Loading more movies...</span>
      </div>
      <p class="mt-2" style="color: var(--accent-purple);">Loading more movies...</p>
    </div>
  `;

  // Create error elements with retry buttons
  const resultsErrorHTML = `
    <div id="results-error" class="text-center py-4 my-3" style="display: none;">
      <p style="color: #ff6b6b;">Failed to load more results</p>
      <button id="retry-results-button" class="btn" style="background-color: var(--primary-purple); color: white;">
        <i class="bi bi-arrow-repeat me-2"></i>Try Again
      </button>
    </div>
  `;
  
  const trendingErrorHTML = `
    <div id="trending-error" class="text-center py-4 my-3" style="display: none;">
      <p style="color: #ff6b6b;">Failed to load more movies</p>
      <button id="retry-trending-button" class="btn" style="background-color: var(--primary-purple); color: white;">
        <i class="bi bi-arrow-repeat me-2"></i>Try Again
      </button>
    </div>
  `;

  // Create end of content messages
  const resultsEndHTML = `
    <div id="results-end" class="text-center py-4 my-3" style="display: none;">
      <p style="color: var(--accent-purple);">You've reached the end of the search results.</p>
    </div>
  `;
  
  const trendingEndHTML = `
    <div id="trending-end" class="text-center py-4 my-3" style="display: none;">
      <p style="color: var(--accent-purple);">You've reached the end of our recommendations.</p>
    </div>
  `;

  // Append elements to the appropriate containers
  const resultsContainer = document.getElementById('resultsContainer');
  const trendingContainer = document.getElementById('trendingContainer');
  
  if (resultsContainer) {
    resultsContainer.insertAdjacentHTML('afterend', resultsSpinnerHTML);
    resultsContainer.insertAdjacentHTML('afterend', resultsErrorHTML);
    resultsContainer.insertAdjacentHTML('afterend', resultsEndHTML);
  }
  
  if (trendingContainer) {
    trendingContainer.insertAdjacentHTML('afterend', trendingSpinnerHTML);
    trendingContainer.insertAdjacentHTML('afterend', trendingErrorHTML);
    trendingContainer.insertAdjacentHTML('afterend', trendingEndHTML);
  }

  // Get references to all the new elements
  const resultsSpinner = document.getElementById('results-spinner');
  const trendingSpinner = document.getElementById('trending-spinner');
  const resultsError = document.getElementById('results-error');
  const trendingError = document.getElementById('trending-error');
  const resultsEnd = document.getElementById('results-end');
  const trendingEnd = document.getElementById('trending-end');
  const retryResultsButton = document.getElementById('retry-results-button');
  const retryTrendingButton = document.getElementById('retry-trending-button');
  
  // Add event listeners to the retry buttons
  if (retryResultsButton) {
    retryResultsButton.addEventListener('click', () => {
      resultsError.style.display = 'none';
      loadMoreResults();
    });
  }
  
  if (retryTrendingButton) {
    retryTrendingButton.addEventListener('click', () => {
      trendingError.style.display = 'none';
      loadMoreTrending();
    });
  }
  
  // Remove the existing Load More button as we'll use automatic loading
  const loadMoreBtn = document.getElementById('loadMoreBtn');
  if (loadMoreBtn) {
    loadMoreBtn.remove();
  }

  // Toggle advanced search options
  const advancedSearchToggle = document.getElementById('advancedSearchToggle');
  const advancedSearchOptions = document.getElementById('advancedSearchOptions');
  
  advancedSearchToggle.addEventListener('click', function() {
    if (!advancedSearchOptions.classList.contains('show')) {
      advancedSearchOptions.style.display = 'block';
      setTimeout(() => {
        advancedSearchOptions.classList.add('show');
      }, 10);
      advancedSearchToggle.innerHTML = '<i class="bi bi-x-lg me-1"></i> Hide Filters';
    } else {
      advancedSearchOptions.classList.remove('show');
      setTimeout(() => {
        advancedSearchOptions.style.display = 'none';
      }, 300);
      advancedSearchToggle.innerHTML = '<i class="bi bi-sliders me-1"></i> Advanced Filters';
    }
  });
  
  // Add event listener for the advanced filters apply button
  document.getElementById('advancedApplyFiltersBtn').addEventListener('click', function() {
    // Update filter state with the values from advanced filters
    filterState.director = document.getElementById('directorFilter').value;
    filterState.actor = document.getElementById('actorFilter').value;
    filterState.rating = document.getElementById('advancedRatingFilter').value;
    
    // Update UI to show active filters
    updateActiveFiltersDisplay();
    
    // Close the advanced filters panel
    advancedSearchOptions.classList.remove('show');
    setTimeout(() => {
      advancedSearchOptions.style.display = 'none';
    }, 300);
    advancedSearchToggle.innerHTML = '<i class="bi bi-sliders me-1"></i> Advanced Filters';
    
    // Apply the filters
    applyFiltersBtn.click();
  });
  
  document.getElementById('ratingFilter').addEventListener('change', function() {
    if (document.getElementById('advancedRatingFilter')) {
      document.getElementById('advancedRatingFilter').value = this.value;
    }
    filterState.rating = this.value;
    updateActiveFiltersDisplay();
  });
  
  document.getElementById('directorFilter')?.addEventListener('input', function() {
    filterState.director = this.value;
    updateActiveFiltersDisplay();
  });
  
  document.getElementById('actorFilter')?.addEventListener('input', function() {
    filterState.actor = this.value;
    updateActiveFiltersDisplay();
  });
  
  document.getElementById('yearFilter').addEventListener('change', function() {
    filterState.year = this.value;
    updateActiveFiltersDisplay();
  });
  
  document.getElementById('typeFilter').addEventListener('change', function() {
    filterState.type = this.value;
    updateActiveFiltersDisplay();
  });
  
  // Handle genre filter checkboxes with improved selection
  const genreCheckboxes = document.querySelectorAll('.genre-checkbox');
  genreCheckboxes.forEach(checkbox => {
    checkbox.addEventListener('change', function() {
      const genre = this.value;
      
      if (this.checked) {
        if (!filterState.genres.includes(genre)) {
          filterState.genres.push(genre);
        }
      } else {
        filterState.genres = filterState.genres.filter(g => g !== genre);
      }
      
      // Update UI to show active filters
      updateActiveFiltersDisplay();
    });
  });
  
  // Function to update the display of active filters
  function updateActiveFiltersDisplay() {
    const activeFiltersDisplay = document.getElementById('activeFiltersDisplay');
    const activeFiltersList = document.getElementById('activeFiltersList');
    const clearFiltersBtn = document.getElementById('clearFiltersBtn');
    
    // Clear the current list
    activeFiltersList.innerHTML = '';
    
    // Check if we have any active filters
    if (filterState.hasActiveFilters()) {
      activeFiltersDisplay.style.display = 'block';
      clearFiltersBtn.style.display = 'block';
      
      // Add genre filters
      filterState.genres.forEach(genre => {
        const tag = document.createElement('span');
        tag.className = 'active-filter-tag';
        tag.innerHTML = `Genre: ${genre} <span class="filter-remove" data-type="genre" data-value="${genre}">×</span>`;
        activeFiltersList.appendChild(tag);
      });
      
      // Add year filter if set
      if (filterState.year) {
        const tag = document.createElement('span');
        tag.className = 'active-filter-tag';
        tag.innerHTML = `Year: ${filterState.year} <span class="filter-remove" data-type="year">×</span>`;
        activeFiltersList.appendChild(tag);
      }
      
      // Add type filter if set
      if (filterState.type) {
        const tag = document.createElement('span');
        tag.className = 'active-filter-tag';
        tag.innerHTML = `Type: ${filterState.type} <span class="filter-remove" data-type="type">×</span>`;
        activeFiltersList.appendChild(tag);
      }
      
      // Add director filter if set
      if (filterState.director) {
        const tag = document.createElement('span');
        tag.className = 'active-filter-tag';
        tag.innerHTML = `Director: ${filterState.director} <span class="filter-remove" data-type="director">×</span>`;
        activeFiltersList.appendChild(tag);
      }
      
      // Add actor filter if set
      if (filterState.actor) {
        const tag = document.createElement('span');
        tag.className = 'active-filter-tag';
        tag.innerHTML = `Actor: ${filterState.actor} <span class="filter-remove" data-type="actor">×</span>`;
        activeFiltersList.appendChild(tag);
      }
      
      // Add rating filter if set
      if (filterState.rating) {
        const tag = document.createElement('span');
        tag.className = 'active-filter-tag';
        tag.innerHTML = `Rating: ${filterState.rating}+ <span class="filter-remove" data-type="rating">×</span>`;
        activeFiltersList.appendChild(tag);
      }
      
      // Add event listeners to remove buttons
      document.querySelectorAll('.filter-remove').forEach(btn => {
        btn.addEventListener('click', function() {
          const filterType = this.getAttribute('data-type');
          const filterValue = this.getAttribute('data-value');
          
          if (filterType === 'genre' && filterValue) {
            filterState.genres = filterState.genres.filter(g => g !== filterValue);
            document.getElementById(filterValue + 'Filter').checked = false;
          } else if (filterType === 'year') {
            filterState.year = '';
            document.getElementById('yearFilter').value = '';
          } else if (filterType === 'type') {
            filterState.type = '';
            document.getElementById('typeFilter').value = '';
          } else if (filterType === 'director') {
            filterState.director = '';
            document.getElementById('directorFilter').value = '';
          } else if (filterType === 'actor') {
            filterState.actor = '';
            document.getElementById('actorFilter').value = '';
          } else if (filterType === 'rating') {
            filterState.rating = '';
            document.getElementById('ratingFilter').value = '';
            if (document.getElementById('advancedRatingFilter')) {
              document.getElementById('advancedRatingFilter').value = '';
            }
          }
          
          // Update the display
          updateActiveFiltersDisplay();
        });
      });
    } else {
      activeFiltersDisplay.style.display = 'none';
      clearFiltersBtn.style.display = 'none';
    }
  }
  
  // Clear filters button
  document.getElementById('clearFiltersBtn').addEventListener('click', function() {
    filterState.clearAll();
  });
  
  // Apply filters button with enhanced functionality
  const applyFiltersBtn = document.getElementById('applyFiltersBtn');
  applyFiltersBtn.addEventListener('click', function() {
    resetSearch();
    
    // Check if we have any active filters
    if (filterState.hasActiveFilters()) {
      // Hide trending and show results section
      document.getElementById('trendingSection').classList.add('d-none');
      document.getElementById('resultsSection').classList.remove('d-none');
      document.getElementById('backToTrendingContainer').classList.remove('d-none');
      activeView = 'results';
      
      // If there's a search query, use that with filters
      if (currentQuery) {
        performSearch(currentQuery, 1, true);
      } else {
        // Otherwise use filtered search
        performFilteredSearch();
      }
    } else if (currentQuery) {
      // If there's only a search query with no filters
      document.getElementById('trendingSection').classList.add('d-none');
      document.getElementById('resultsSection').classList.remove('d-none');
      document.getElementById('backToTrendingContainer').classList.remove('d-none');
      activeView = 'results';
      performSearch(currentQuery, 1);
    } else {
      // If no filters and no search, show trending
      loadTrendingMovies(currentTab);
      document.getElementById('trendingSection').classList.remove('d-none');
      document.getElementById('resultsSection').classList.add('d-none');
      activeView = 'trending';
    }
  });
  
  // Back to trending button
  document.getElementById('backToTrendingBtn').addEventListener('click', function() {
    // Show trending section, hide results
    document.getElementById('trendingSection').classList.remove('d-none');
    document.getElementById('resultsSection').classList.add('d-none');
    activeView = 'trending';
    
    // Reset the search input
    document.getElementById('searchInput').value = '';
    currentQuery = '';
  });
  
  // Store current sort order
  let currentSortOrder = 'relevance';
  
  // Handle sorting options with improved behavior
  const sortOptions = document.getElementById('sortOptions');
  sortOptions.addEventListener('change', function() {
    currentSortOrder = this.value;
    sortMovieCards();
  });
  
  // Function to sort movie cards - separated to avoid duplication
  function sortMovieCards() {
    const resultsContainer = document.getElementById('resultsContainer');
    const movieCards = Array.from(resultsContainer.querySelectorAll('.col'));
    
    // Sort the movie cards based on selected option
    movieCards.sort((a, b) => {
      const sortBy = currentSortOrder;
      
      if (sortBy === 'title') {
        const titleA = a.querySelector('.movie-title').textContent.toLowerCase();
        const titleB = b.querySelector('.movie-title').textContent.toLowerCase();
        return titleA.localeCompare(titleB);
      } else if (sortBy === 'year') {
        // Extract year from text which might include additional information
        const yearA = parseInt(a.querySelector('.movie-year').textContent.match(/\d{4}/)?.[0] || 0);
        const yearB = parseInt(b.querySelector('.movie-year').textContent.match(/\d{4}/)?.[0] || 0);
        return yearB - yearA; // Newest first
      } else if (sortBy === 'rating') {
        const ratingA = parseFloat(a.querySelector('.movie-rating').textContent.replace(/[^\d.]/g, '')) || 0;
        const ratingB = parseFloat(b.querySelector('.movie-rating').textContent.replace(/[^\d.]/g, '')) || 0;
        return ratingB - ratingA; // Highest first
      }
      
      // Default to original order (relevance)
      return 0;
    });
    
    // Re-append sorted cards to container
    movieCards.forEach(card => resultsContainer.appendChild(card));
  }
  
  // Handle tab switching with improved loading
const tabButtons = document.querySelectorAll('.tab-btn');
tabButtons.forEach(button => {
  button.addEventListener('click', function() {
    // Remove active class from all tabs
    tabButtons.forEach(btn => btn.classList.remove('active'));
    // Add active class to clicked tab
    this.classList.add('active');
    
    // Get the tab type
    const tabType = this.getAttribute('data-tab');
    
    // Reset existing filters
    filterState.clearAll();
    
    // Keep search box empty for all tabs
    document.getElementById('searchInput').value = '';
    currentQuery = '';
    
    // Set the active view to results
    activeView = 'results';
    
    // Reset search state
    resetSearch();
    
    // Special handling based on tab type
    if (tabType === 'latest') {
      // --- LATEST TAB: Current year movies sorted newest first ---
      
      // Set the current year
      const currentYear = new Date().getFullYear(); // This will be 2025 in your app's timeline
      
      // Update the filter state with the current year
      filterState.year = currentYear.toString();
      document.getElementById('yearFilter').value = currentYear.toString();
      
      // Set sorting to year/newest first
      document.getElementById('newestFilter').checked = true;
      filterState.newestFirst = true;
      sortOptions.value = 'year';
      currentSortOrder = 'year';
      
      // Update the UI to show active filters
      updateActiveFiltersDisplay();
      
      // Hide trending and show results section
      document.getElementById('trendingSection').classList.add('d-none');
      document.getElementById('resultsSection').classList.remove('d-none');
      document.getElementById('backToTrendingContainer').classList.remove('d-none');
      
      // For the latest movies, use a generic search term with year filter
      const defaultSearchTerm = "movie"; // Generic term that will match most movies
      performSearch(defaultSearchTerm, 1, true);
      
      // Update the results title
      const resultsTitle = document.querySelector('.results-title');
      if (resultsTitle) {
        resultsTitle.textContent = `Latest Movies (${currentYear})`;
      }
      
    } else if (tabType === 'popular') {
      // --- POPULAR TAB: Highly-rated, recent, mainstream movies ---
      
      // Set rating filter to show higher-rated movies
      filterState.rating = "7"; // 7+ rated movies
      document.getElementById('ratingFilter').value = "7";
      
      // Set genre filters for mainstream popular genres
      filterState.genres = ["action", "adventure"];
      document.querySelectorAll('.genre-checkbox').forEach(checkbox => {
        if (["actionFilter", "adventureFilter"].includes(checkbox.id)) {
          checkbox.checked = true;
        }
      });
      
      // Set sort by rating
      sortOptions.value = 'rating';
      currentSortOrder = 'rating';
      
      // Update the UI to show active filters
      updateActiveFiltersDisplay();
      
      // Hide trending and show results section
      document.getElementById('trendingSection').classList.add('d-none');
      document.getElementById('resultsSection').classList.remove('d-none');
      document.getElementById('backToTrendingContainer').classList.remove('d-none');
      
      // Popular movies search term with filters
      const popularSearchTerm = "movie";
      performSearch(popularSearchTerm, 1, true);
      
      // Update the results title
      const resultsTitle = document.querySelector('.results-title');
      if (resultsTitle) {
        resultsTitle.textContent = "Popular Movies";
      }
      
    } else if (tabType === 'recommended') {
      // --- FOR YOU TAB: Critically acclaimed, diverse selections ---
      
      // Set rating filter for critically acclaimed movies
      filterState.rating = "8"; // 8+ rated movies
      document.getElementById('ratingFilter').value = "8";
      
      // Sort by rating for critically acclaimed movies
      sortOptions.value = 'rating';
      currentSortOrder = 'rating';
      
      // Update the UI to show active filters
      updateActiveFiltersDisplay();
      
      // Hide trending and show results section
      document.getElementById('trendingSection').classList.add('d-none');
      document.getElementById('resultsSection').classList.remove('d-none');
      document.getElementById('backToTrendingContainer').classList.remove('d-none');
      
      // For "For You" recommended movies
      const recommendedSearchTerm = "movie";
      performSearch(recommendedSearchTerm, 1, true);
      
      // Update the results title
      const resultsTitle = document.querySelector('.results-title');
      if (resultsTitle) {
        resultsTitle.textContent = "Recommended For You";
      }
      
    } else {
      // Default handling for any other tabs
      currentTab = tabType;
      
      // Show trending section and hide results
      document.getElementById('trendingSection').classList.remove('d-none');
      document.getElementById('resultsSection').classList.add('d-none');
      activeView = 'trending';
      
      // Show loading state
      const trendingContainer = document.getElementById('trendingContainer');
      trendingContainer.innerHTML = generateSkeletonLoaders(5);
      
      // Load trending movies
      loadTrendingMovies(currentTab);
    }
  });
});
  
  // Handle popular search pills
  const popularSearchButtons = document.querySelectorAll('.popular-search-pill');
  popularSearchButtons.forEach(button => {
    button.addEventListener('click', function() {
      const searchTerm = this.getAttribute('data-search');
      document.getElementById('searchInput').value = searchTerm;
      resetSearch();
      performSearch(searchTerm, 1);
    });
  });
  
  // Search form submission
  const searchForm = document.getElementById('searchForm');
  const searchInput = document.getElementById('searchInput');
  
  searchForm.addEventListener('submit', function(e) {
    e.preventDefault();
    const searchTerm = searchInput.value.trim();
    if (searchTerm) {
      resetSearch();
      document.getElementById('backToTrendingContainer').classList.remove('d-none');
      activeView = 'results';
      
      // Update sort options to default on new search
      if (currentSortOrder !== 'relevance') {
        sortOptions.value = 'relevance';
        currentSortOrder = 'relevance';
      }
      
      performSearch(searchTerm, 1);
    }
  });
  
  // Generate skeleton loaders
  function generateSkeletonLoaders(count) {
    let skeletons = '';
    for (let i = 0; i < count; i++) {
      skeletons += `
        <div class="col">
          <div class="movie-card skeleton">
            <div class="movie-poster-placeholder"></div>
            <div class="movie-info-placeholder">
              <div class="placeholder-title"></div>
              <div class="placeholder-year"></div>
            </div>
          </div>
        </div>
      `;
    }
    return skeletons;
  }
  
  // Load trending movies on page load
  loadTrendingMovies('popular');
  
  // Reset search state
  function resetSearch() {
    // Only reset the page number and query when starting a new search
    page = 1;
    currentQuery = searchInput.value.trim();
    hasMoreResults = true;
    
    // Clear previous results
    document.getElementById('resultsContainer').innerHTML = '';
    
    // Hide previous messages and errors
    if (resultsEnd) resultsEnd.style.display = 'none';
    if (resultsError) resultsError.style.display = 'none';
  }

  // Helper functions for infinite scroll spinners
  function showResultsSpinner() {
    if (resultsSpinner) resultsSpinner.style.display = 'block';
    if (resultsError) resultsError.style.display = 'none';
  }
  
  function hideResultsSpinner() {
    if (resultsSpinner) resultsSpinner.style.display = 'none';
  }
  
  function showTrendingSpinner() {
    if (trendingSpinner) trendingSpinner.style.display = 'block';
    if (trendingError) trendingError.style.display = 'none';
  }
  
  function hideTrendingSpinner() {
    if (trendingSpinner) trendingSpinner.style.display = 'none';
  }
  
  function showResultsError() {
    hideResultsSpinner();
    if (resultsError) resultsError.style.display = 'block';
  }
  
  function showTrendingError() {
    hideTrendingSpinner();
    if (trendingError) trendingError.style.display = 'block';
  }
  
  function showResultsEnd() {
    hideResultsSpinner();
    if (resultsEnd) resultsEnd.style.display = 'block';
  }
  
  function showTrendingEnd() {
    hideTrendingSpinner();
    if (trendingEnd) trendingEnd.style.display = 'block';
  }
  
  // Perform filtered search with no query term
  function performFilteredSearch() {
    if (isLoading) return;
    
    // Don't reset the whole search if we're just loading more results
    if (page === 1) {
      // Show loading state
      document.getElementById('loadingIndicator').classList.remove('d-none');
      document.getElementById('noResultsMessage').classList.add('d-none');
      
      // Clear previous results only on a new search
      document.getElementById('resultsContainer').innerHTML = '';
    } else {
      // For infinite scrolling, show the spinner instead
      showResultsSpinner();
    }
    
    isLoading = true;
    
    // Get filter values from the filter state
    const genresString = filterState.genres.join(',');
    
    // Determine primary search term based on available filters
    let searchQuery = '';
    
    // If director or actor is specified, use that as primary search term
    if (filterState.director) {
      searchQuery = `director:${filterState.director}`;
    } else if (filterState.actor) {
      searchQuery = `actor:${filterState.actor}`;
    } else if (filterState.genres.length > 0) {
      // Otherwise use first genre as search term
      searchQuery = filterState.genres[0];
    } else {
      // Default search term if none provided
      searchQuery = 'movie';
    }
    
    // Build the API URL with query parameters - using search endpoint with filters
    let apiUrl = `/api/movies/search?query=${encodeURIComponent(searchQuery)}&page=${page}`;
    
    if (genresString) {
      apiUrl += `&genres=${genresString}`;
    }
    
    if (filterState.year) {
      apiUrl += `&year=${filterState.year}`;
    }
    
    if (filterState.type) {
      apiUrl += `&type=${filterState.type}`;
    }
    
    // Only add these if they weren't used as the primary search term
    if (filterState.director && !searchQuery.startsWith('director:')) {
      apiUrl += `&director=${encodeURIComponent(filterState.director)}`;
    }
    
    if (filterState.actor && !searchQuery.startsWith('actor:')) {
      apiUrl += `&actor=${encodeURIComponent(filterState.actor)}`;
    }
    
    if (filterState.rating) {
      apiUrl += `&minRating=${filterState.rating}`;
    }
    
    // Add sorting parameters using the current sort order
    if (currentSortOrder !== 'relevance') {
      apiUrl += `&sort=${currentSortOrder}`;
    }
    
    // Add newest first parameter based on checkbox
    apiUrl += `&newestFirst=${document.getElementById('newestFilter').checked}`;
    
    fetch(apiUrl)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok: ' + response.status);
        }
        return response.json();
      })
      .then(data => {
        document.getElementById('loadingIndicator').classList.add('d-none');
        hideResultsSpinner();
        isLoading = false;
        
        if (!data.success || !data.results || data.results.length === 0) {
          if (page === 1) {
            document.getElementById('noResultsMessage').classList.remove('d-none');
          } else {
            // No more results with infinite scroll
            hasMoreResults = false;
            showResultsEnd();
          }
          return;
        }
        
        // Render results
        renderSearchResults(data.results);
        
        // Update results title with count
        const resultsTitle = document.querySelector('.results-title');
        if (resultsTitle) {
          resultsTitle.textContent = `Search Results (${data.totalResults})`;
        }
        
        // Check if there are more pages
        hasMoreResults = data.hasMorePages;
        if (!hasMoreResults) {
          showResultsEnd();
        }

        // Increment page for next load
        page++;
      })
      .catch(error => {
        console.error('Error fetching filtered results:', error);
        document.getElementById('loadingIndicator').classList.add('d-none');
        if (page === 1) {
          document.getElementById('noResultsMessage').classList.remove('d-none');
        } else {
          showResultsError();
        }
        isLoading = false;
      });
  }
  
  // Main search function
  function performSearch(query, currentPage = 1, withFilters = false) {
    if (isLoading) {
      return; // Prevent multiple simultaneous searches
    }
    
    // Don't reset the whole search if we're just loading more results
    if (currentPage === 1) {
      // Show loading state
      document.getElementById('loadingIndicator').classList.remove('d-none');
      document.getElementById('noResultsMessage').classList.add('d-none');
      
      // Hide trending section and show results section
      document.getElementById('trendingSection').classList.add('d-none');
      document.getElementById('resultsSection').classList.remove('d-none');
      
      // Clear previous results only on a new search
      document.getElementById('resultsContainer').innerHTML = '';
    } else {
      // For infinite scrolling, show the spinner
      showResultsSpinner();
    }
    
    isLoading = true;
    
    // Build the API URL with query parameters
    let apiUrl = `/api/movies/search?query=${encodeURIComponent(query)}&page=${currentPage}`;
    
    // Add filters if requested
    if (withFilters) {
      if (filterState.year) {
        apiUrl += `&year=${filterState.year}`;
      }
      
      if (filterState.type) {
        apiUrl += `&type=${filterState.type}`;
      }
      
      if (filterState.genres.length > 0) {
        apiUrl += `&genres=${filterState.genres.join(',')}`;
      }
      
      if (filterState.director) {
        apiUrl += `&director=${encodeURIComponent(filterState.director)}`;
      }
      
      if (filterState.actor) {
        apiUrl += `&actor=${encodeURIComponent(filterState.actor)}`;
      }
      
      if (filterState.rating) {
        apiUrl += `&minRating=${filterState.rating}`;
      }
    }
    
    // Add sorting parameters using the current sort order
    if (currentSortOrder !== 'relevance') {
      apiUrl += `&sort=${currentSortOrder}`;
    }
    
    // Add newest first parameter based on checkbox
    apiUrl += `&newestFirst=${document.getElementById('newestFilter').checked}`;
    
    // Fetch from the API
    fetch(apiUrl)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok: ' + response.status);
        }
        return response.json();
      })
      .then(data => {
        document.getElementById('loadingIndicator').classList.add('d-none');
        hideResultsSpinner();
        isLoading = false;
        
        if (!data.success || !data.results || data.results.length === 0) {
          if (currentPage === 1) {
            document.getElementById('noResultsMessage').classList.remove('d-none');
          } else {
            // No more results for infinite scroll
            hasMoreResults = false;
            showResultsEnd();
          }
          return;
        }

      // Render results
        renderSearchResults(data.results);
        
        // Update results title with count
        const resultsTitle = document.querySelector('.results-title');
        if (resultsTitle) {
          resultsTitle.textContent = `Search Results (${data.totalResults})`;
        }
        
        // Check if there are more pages
        hasMoreResults = data.hasMorePages;
        if (!hasMoreResults) {
          showResultsEnd();
        }
        
        // Increment page for next load
        page++;
      })
      .catch(error => {
        console.error('Error fetching search results:', error);
        document.getElementById('loadingIndicator').classList.add('d-none');
        if (currentPage === 1) {
          document.getElementById('noResultsMessage').classList.remove('d-none');
        } else {
          showResultsError();
        }
        isLoading = false;
      });
  }

  // Function to load more trending movies
  async function loadMoreTrending() {
    if (isLoading || !hasMoreTrending) return;
    
    isLoading = true;
    showTrendingSpinner();
    
    try {
      // Build the API URL for trending movies
      const apiUrl = `/api/movies/trending?type=${currentTab}&page=${page + 1}`;
      
      // Fetch more trending movies
      const response = await fetch(apiUrl);
      if (!response.ok) throw new Error('Network response was not ok');
      
      const data = await response.json();
      
      hideTrendingSpinner();
      
      if (data.success && data.results && data.results.length > 0) {
        // Increment the page counter for next load
        page++;
        
        // Render the new movies
        renderTrendingMovies(data.results);
        
        // Check if there are more pages
        hasMoreTrending = data.hasMorePages;
        if (!hasMoreTrending) {
          showTrendingEnd();
        }
      } else {
        // No more trending movies
        hasMoreTrending = false;
        showTrendingEnd();
      }
    } catch (error) {
      console.error('Error loading more trending movies:', error);
      showTrendingError();
    } finally {
      isLoading = false;
    }
  }
  
  // Load trending movies with improved error handling
  function loadTrendingMovies(type = 'popular') {
    // Reset pagination for trending when changing tabs
    if (currentTab !== type) {
      page = 1;
      hasMoreTrending = true;
      if (trendingEnd) trendingEnd.style.display = 'none';
      if (trendingError) trendingError.style.display = 'none';
    }
    
    currentTab = type;
    
    // Clear the container and show loading state
    const trendingContainer = document.getElementById('trendingContainer');
    trendingContainer.innerHTML = generateSkeletonLoaders(5);
    
    // Fetch trending movies from the API
    fetch(`/api/movies/trending?type=${type}`)
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(data => {
        // Clear placeholders
        trendingContainer.innerHTML = '';
        
        if (!data.success || !data.results) {
          console.error('Invalid trending data format');
          return;
        }
        
        // Render trending movies with staggered animation
        renderTrendingMovies(data.results);
        
        // Update pagination data
        hasMoreTrending = data.hasMorePages;
      })
      .catch(error => {
        console.error('Error loading trending movies:', error);
        trendingContainer.innerHTML = `
          <div class="col-12 text-center text-light">
            <p>Unable to load trending movies. Please try again later.</p>
          </div>
        `;
      });
  }
  
  // Render search results with improved movie info display
  function renderSearchResults(movies) {
    const resultsContainer = document.getElementById('resultsContainer');
    
    movies.forEach((movie, index) => {
      const movieElement = document.createElement('div');
      movieElement.className = 'col animate-fade-in';
      movieElement.style.animationDelay = `${index * 0.05}s`;
      
      // Default poster image if not available
      const posterUrl = movie.poster && movie.poster !== 'N/A' 
        ? movie.poster 
        : '/api/placeholder/300/450';
      
      // Extract year from movie.year which might be a range like "2022-2023"
      const year = movie.year ? movie.year.split('-')[0].trim() : '';
      
      // Format rating to show one decimal place if it's a whole number
      let displayRating = movie.rating;
      if (movie.rating && movie.rating !== 'N/A') {
        const numRating = parseFloat(movie.rating);
        displayRating = Number.isInteger(numRating) ? numRating.toFixed(1) : numRating.toString();
      } else {
        displayRating = 'N/A';
      }
      
      // Prepare genres display if available
      let genreDisplay = '';
      if (movie.genre) {
        // Get the first genre if multiple are provided
        const genres = typeof movie.genre === 'string' ? movie.genre.split(',')[0].trim() : '';
        genreDisplay = `<div class="movie-genre">${genres}</div>`;
      } else {
        genreDisplay = '';
      }
      
      movieElement.innerHTML = `
        <div class="movie-card" data-imdb-id="${movie.id}" onclick="location.href='/movies/details/${movie.id}'">
          <div class="poster-container">
            <img src="${posterUrl}" alt="${movie.title}" class="movie-poster">
            <button class="watchlist-btn" title="Add to watchlist" onclick="event.stopPropagation(); addToWatchlist('${movie.id}', '${movie.title.replace(/'/g, "\\'")}', '${posterUrl}')">
              <i class="bi bi-plus-lg"></i>
            </button>
          </div>
          <div class="movie-info">
            <div class="movie-title">${movie.title}</div>
            <div class="movie-year-rating">
              <div class="movie-year">${year}</div>
              <div class="movie-rating">
                <i class="bi bi-star-fill"></i> ${displayRating}
              </div>
            </div>
            ${genreDisplay}
          </div>
        </div>
      `;
      
      resultsContainer.appendChild(movieElement);
    });
    
    // Apply current sort only if necessary and remember the current sort order
    if (currentSortOrder !== 'relevance') {
      sortMovieCards();
    }
  }
  
  // Function to render trending movies
  function renderTrendingMovies(movies) {
    const trendingContainer = document.getElementById('trendingContainer');
    
    movies.forEach((movie, index) => {
      const movieElement = document.createElement('div');
      movieElement.className = 'col animate-fade-in';
      movieElement.style.animationDelay = `${index * 0.05}s`;
      
      const posterUrl = movie.poster && movie.poster !== 'N/A' 
        ? movie.poster 
        : `/api/placeholder/300/450`;
      
      // Extract year from movie.year which might be a range
      const year = movie.year ? movie.year.split('-')[0].trim() : '';
      
      // Format rating to show one decimal place if it's a whole number
      let displayRating = movie.rating;
      if (movie.rating && movie.rating !== 'N/A') {
        const numRating = parseFloat(movie.rating);
        displayRating = Number.isInteger(numRating) ? numRating.toFixed(1) : numRating.toString();
      } else {
        displayRating = 'N/A';
      }
      
      // Prepare genres display if available
      let genreDisplay = '';
      if (movie.genre) {
        // Get the first genre if multiple are provided
        const genres = typeof movie.genre === 'string' ? movie.genre.split(',')[0].trim() : '';
        genreDisplay = `<div class="movie-genre">${genres}</div>`;
      }
      
      movieElement.innerHTML = `
        <div class="movie-card" data-imdb-id="${movie.id}" onclick="location.href='/movies/details/${movie.id}'">
          <div class="poster-container">
            <img src="${posterUrl}" alt="${movie.title}" class="movie-poster">
            <button class="watchlist-btn" title="Add to watchlist" onclick="event.stopPropagation(); addToWatchlist('${movie.id}', '${movie.title.replace(/'/g, "\\'")}', '${posterUrl}')">
              <i class="bi bi-plus-lg"></i>
            </button>
          </div>
          <div class="movie-info">
            <div class="movie-title">${movie.title}</div>
            <div class="movie-year-rating">
              <div class="movie-year">${year}</div>
              <div class="movie-rating">
                <i class="bi bi-star-fill"></i> ${displayRating}
              </div>
            </div>
            ${genreDisplay}
          </div>
        </div>
      `;
      
      trendingContainer.appendChild(movieElement);
    });
  }

  // Enhanced watchlist functionality
  window.addToWatchlist = function(imdbId, title, posterUrl) {
    // Get the button that was clicked
    const watchlistBtn = event.target.closest('.watchlist-btn');
    
    // Show micro-interaction
    watchlistBtn.innerHTML = '<i class="bi bi-check"></i>';
    watchlistBtn.style.backgroundColor = 'var(--primary-purple)';
    watchlistBtn.style.color = 'white';
    
    // Make API call to add to watchlist
    fetch('/api/movies/watchlist', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        imdbId: imdbId,
        title: title,
        poster: posterUrl
      }),
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Keep the check mark and update tooltip
        watchlistBtn.title = "Added to watchlist";
        console.log('Added to watchlist:', title);
      } else {
        // Reset button on error
        watchlistBtn.innerHTML = '<i class="bi bi-plus-lg"></i>';
        watchlistBtn.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        watchlistBtn.style.color = '#fff';
        console.error('Error adding to watchlist:', data.error);
        
        // Show error if user is not logged in
        if (data.error === 'User not authenticated') {
          alert('Please log in to add movies to your watchlist');
        }
      }
    })
    .catch(error => {
      // Reset button on error
      watchlistBtn.innerHTML = '<i class="bi bi-plus-lg"></i>';
      watchlistBtn.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
      watchlistBtn.style.color = '#fff';
      console.error('Error adding to watchlist:', error);
    });
    
    // Prevent click event from bubbling up to the movie card
    event.stopPropagation();
  };
  
  // Handle "newest first" checkbox
  const newestFilter = document.getElementById('newestFilter');
  newestFilter.addEventListener('change', function() {
    filterState.newestFirst = this.checked;
    
    // If we're on the results page, update sorting
    if (!document.getElementById('resultsSection').classList.contains('d-none')) {
      if (this.checked) {
        // Update the sort dropdown UI
        sortOptions.value = 'year';
        // Update the global sorting variable
        currentSortOrder = 'year';
        // Apply sorting
        sortMovieCards();
      }
    }
  });
  
  // Sync advanced rating filter with sidebar rating filter
  document.getElementById('ratingFilter').addEventListener('change', function() {
    const advancedRatingFilter = document.getElementById('advancedRatingFilter');
    if (advancedRatingFilter) {
      advancedRatingFilter.value = this.value;
    }
  });
  
  document.getElementById('advancedRatingFilter')?.addEventListener('change', function() {
    document.getElementById('ratingFilter').value = this.value;
  });
  
  // Initialize active filters display on page load
  updateActiveFiltersDisplay();

  // Implement scroll-based loading with debounce for better performance
  let debounceTimer;
  
  window.addEventListener('scroll', () => {
    if (scrollLock) return; // Prevent multiple triggers while loading
    
    clearTimeout(debounceTimer); // Reset debounce timer
    
    debounceTimer = setTimeout(() => {
      const scrollPosition = window.innerHeight + window.scrollY;
      const pageHeight = Math.max(
        document.body.scrollHeight, 
        document.documentElement.scrollHeight,
        document.body.offsetHeight, 
        document.documentElement.offsetHeight
      );
      
      // If we're near the bottom of the page
      if (scrollPosition >= pageHeight - 500) {
        // Determine which content to load based on active view
        if (activeView === 'results' && !isLoading && hasMoreResults) {
          // Lock scrolling until new content is loaded
          scrollLock = true;
          
          // If we have filters, use filtered search
          if (filterState.hasActiveFilters()) {
            performFilteredSearch();
          } else if (currentQuery) {
            // Otherwise use standard search
            performSearch(currentQuery, page);
          }
          
          // Release lock after a short delay to prevent multiple loads
          setTimeout(() => {
            scrollLock = false;
          }, 1000);
        } else if (activeView === 'trending' && !isLoading && hasMoreTrending) {
          // Lock scrolling until new content is loaded
          scrollLock = true;
          loadMoreTrending();
          
          // Release lock after a short delay to prevent multiple loads
          setTimeout(() => {
            scrollLock = false;
          }, 1000);
        }
      }
    }, 150);
  });

  // Set up a mutation observer to detect when sections are hidden/shown
  const trendingSection = document.getElementById('trendingSection');
  const resultsSection = document.getElementById('resultsSection');
  
  const observer = new MutationObserver(mutations => {
    mutations.forEach(mutation => {
      if (mutation.attributeName === 'class') {
        const target = mutation.target;
        // Check if trending section is visible
        if (target === trendingSection && !target.classList.contains('d-none')) {
          activeView = 'trending';
          console.log('Switched to trending view');
        }
        // Check if results section is visible
        else if (target === resultsSection && !target.classList.contains('d-none')) {
          activeView = 'results';
          console.log('Switched to results view');
        }
      }
    });
  });
  
  // Start observing the sections for class changes
  if (trendingSection) {
    observer.observe(trendingSection, { attributes: true });
  }
  
  if (resultsSection) {
    observer.observe(resultsSection, { attributes: true });
  }
});
</script>