{{!-- This will be injected into the {{{body}}} section of main.hbs --}}

<style>
  .movie-card {
    transition: transform 0.3s, box-shadow 0.3s;
    height: 100%;
  }
  
  .movie-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0,0,0,0.2);
  }
  
  .movie-poster {
    height: 350px;
    object-fit: cover;
  }
  
  .search-container {
    background-color: #f8f9fa;
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 30px;
  }
  
  .section-title {
    margin: 30px 0 20px 0;
    padding-bottom: 10px;
    border-bottom: 2px solid #f1f1f1;
  }
  
  .rating-star {
    color: #ffc107;
  }
  
  .page-header {
    background: linear-gradient(135deg, #5F4B8B, #2c3e50);
    color: white;
    padding: 40px 0;
    margin-bottom: 30px;
    text-align: center;
  }
  
  .movie-title {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
  
  .movie-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .shimmer-effect {
    background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
    background-size: 200% 100%;
    animation: shimmer 1.5s infinite;
    height: 100%;
    width: 100%;
    border-radius: 8px;
  }
  
  @keyframes shimmer {
    0% { background-position: -200% 0; }
    100% { background-position: 200% 0; }
  }
  
  .tab-buttons {
    display: flex;
    margin-bottom: 20px;
  }
  
  .tab-btn {
    padding: 10px 20px;
    background: #f1f1f1;
    border: none;
    border-bottom: 3px solid transparent;
    cursor: pointer;
    transition: all 0.3s;
    font-weight: 600;
  }
  
  .tab-btn.active {
    border-bottom: 3px solid #5F4B8B;
    background: white;
  }
  
  .tab-btn:hover:not(.active) {
    background: #e9e9e9;
  }
  
  .results-info {
    margin-bottom: 20px;
    font-style: italic;
    color: #6c757d;
  }

  #loading-spinner {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 200px;
  }
</style>

<div class="page-header">
  <div class="container">
    <h1>Explore Movies</h1>
    <p class="lead">Discover new films or search for your favorites</p>
  </div>
</div>

<div class="container">
  <div class="search-container">
    <form id="search-form" class="row g-3">
      <div class="col-md-6">
        <input type="text" id="search-input" class="form-control form-control-lg" placeholder="Search for movies...">
      </div>
      <div class="col-md-2">
        <select id="year-filter" class="form-select form-select-lg">
          <option value="">Any Year</option>
          <option value="2024">2024</option>
          <option value="2023">2023</option>
          <option value="2022">2022</option>
          <option value="2021">2021</option>
          <option value="2020">2020</option>
          <option value="2019">2019</option>
          <option value="2018">2018</option>
          <option value="2017">2017</option>
          <option value="2016">2016</option>
          <option value="2015">2015</option>
          <option value="2010s">2010s</option>
          <option value="2000s">2000s</option>
          <option value="1990s">1990s</option>
          <option value="1980s">1980s</option>
          <option value="Classic">Pre-1980</option>
        </select>
      </div>
      <div class="col-md-2">
        <select id="type-filter" class="form-select form-select-lg">
          <option value="">Any Type</option>
          <option value="movie">Movies</option>
          <option value="series">TV Series</option>
        </select>
      </div>
      <div class="col-md-2">
        <button type="submit" class="btn btn-primary btn-lg w-100">Search</button>
      </div>
    </form>
  </div>
  
  <div class="tab-buttons">
    <button class="tab-btn active" id="trending-tab">Trending Now</button>
    <button class="tab-btn" id="search-results-tab" style="display: none;">Search Results</button>
  </div>
  
  <div id="results-info" class="results-info" style="display: none;">
    <!-- Search results info will be displayed here -->
  </div>
  
  <div id="loading-spinner" class="text-center">
    <div class="spinner-border text-primary" role="status">
      <span class="visually-hidden">Loading...</span>
    </div>
  </div>
  
  <div id="movies-container" class="row g-4">
    <!-- Movies will be displayed here -->
  </div>
  
  <div id="pagination" class="d-flex justify-content-center mt-4 mb-5" style="display: none !important;">
    <nav aria-label="Movie results navigation">
      <ul class="pagination pagination-lg">
        <li class="page-item disabled" id="prev-page">
          <a class="page-link" href="#" tabindex="-1">Previous</a>
        </li>
        <li class="page-item" id="next-page">
          <a class="page-link" href="#">Next</a>
        </li>
      </ul>
    </nav>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const searchForm = document.getElementById('search-form');
    const searchInput = document.getElementById('search-input');
    const yearFilter = document.getElementById('year-filter');
    const typeFilter = document.getElementById('type-filter');
    const moviesContainer = document.getElementById('movies-container');
    const loadingSpinner = document.getElementById('loading-spinner');
    const pagination = document.getElementById('pagination');
    const prevPageBtn = document.getElementById('prev-page');
    const nextPageBtn = document.getElementById('next-page');
    const resultsInfo = document.getElementById('results-info');
    const trendingTab = document.getElementById('trending-tab');
    const searchResultsTab = document.getElementById('search-results-tab');
    
    // State
    let currentQuery = '';
    let currentPage = 1;
    let totalResults = 0;
    let currentTab = 'trending';
    let searchResults = [];
    let trendingMovies = [];
    
    // Load trending movies on page load
    loadTrendingMovies();
    
    // Event listeners
    searchForm.addEventListener('submit', function(e) {
      e.preventDefault();
      currentPage = 1;
      searchMovies();
    });
    
    prevPageBtn.addEventListener('click', function(e) {
      e.preventDefault();
      if (currentPage > 1) {
        currentPage--;
        searchMovies();
      }
    });
    
    nextPageBtn.addEventListener('click', function(e) {
      e.preventDefault();
      const totalPages = Math.ceil(totalResults / 10);
      if (currentPage < totalPages) {
        currentPage++;
        searchMovies();
      }
    });
    
    trendingTab.addEventListener('click', function() {
      setActiveTab('trending');
      displayMovies(trendingMovies);
      pagination.style.display = 'none !important';
      resultsInfo.style.display = 'none';
    });
    
    searchResultsTab.addEventListener('click', function() {
      setActiveTab('search');
      displayMovies(searchResults);
      if (totalResults > 10) {
        pagination.style.display = 'flex !important';
      }
      resultsInfo.style.display = 'block';
    });
    
    // Functions
    function setActiveTab(tab) {
      currentTab = tab;
      if (tab === 'trending') {
        trendingTab.classList.add('active');
        searchResultsTab.classList.remove('active');
      } else {
        trendingTab.classList.remove('active');
        searchResultsTab.classList.add('active');
      }
    }
    
    async function loadTrendingMovies() {
      loadingSpinner.style.display = 'flex';
      moviesContainer.innerHTML = '';
      
      try {
        const response = await fetch('/api/movies/new');
        const data = await response.json();
        
        loadingSpinner.style.display = 'none';
        
        if (data.success && data.results && data.results.length > 0) {
          trendingMovies = data.results;
          displayMovies(trendingMovies);
        } else {
          moviesContainer.innerHTML = '<div class="col-12 text-center"><p class="lead">Failed to load trending movies. Please try again later.</p></div>';
        }
      } catch (error) {
        console.error('Error loading trending movies:', error);
        loadingSpinner.style.display = 'none';
        moviesContainer.innerHTML = '<div class="col-12 text-center"><p class="lead">An error occurred while loading trending movies. Please try again later.</p></div>';
      }
    }
    
    async function searchMovies() {
      const query = searchInput.value.trim();
      const year = yearFilter.value;
      const type = typeFilter.value;
      
      if (!query) {
        alert('Please enter a search term');
        return;
      }
      
      currentQuery = query;
      
      // Show loading indicator
      loadingSpinner.style.display = 'flex';
      moviesContainer.innerHTML = '';
      pagination.style.display = 'none !important';
      resultsInfo.style.display = 'none';
      
      try {
        let url = `/api/movies/search?query=${encodeURIComponent(query)}&page=${currentPage}`;
        
        if (year) {
          url += `&year=${year}`;
        }
        
        if (type) {
          url += `&type=${type}`;
        }
        
        const response = await fetch(url);
        const data = await response.json();
        
        // Hide loading indicator
        loadingSpinner.style.display = 'none';
        
        if (!data.success) {
          moviesContainer.innerHTML = `<div class="col-12 alert alert-warning">${data.error || 'No results found'}</div>`;
          return;
        }
        
        // Show search results tab
        searchResultsTab.style.display = 'block';
        setActiveTab('search');
        
        // Update results info
        totalResults = data.totalResults;
        updateResultsInfo(query, data.totalResults);
        
        // Save and display search results
        searchResults = data.results;
        displayMovies(searchResults);
        
        // Update pagination
        updatePagination();
      } catch (error) {
        console.error('Error searching movies:', error);
        loadingSpinner.style.display = 'none';
        moviesContainer.innerHTML = '<div class="col-12 alert alert-danger">An error occurred while searching. Please try again.</div>';
      }
    }
    
    function updateResultsInfo(query, total) {
      resultsInfo.innerHTML = `Found ${total} results for "${query}"`;
      resultsInfo.style.display = 'block';
    }
    
    function displayMovies(movies) {
      if (!movies || movies.length === 0) {
        moviesContainer.innerHTML = '<div class="col-12 alert alert-warning">No movies found</div>';
        return;
      }
      
      moviesContainer.innerHTML = '';
      
      movies.forEach(movie => {
        const posterUrl = movie.Poster && movie.Poster !== 'N/A' 
          ? movie.Poster 
          : '/resources/img/no-poster.png';
        
        // For trending movies, we have full details. For search results, we have basic info.
        const title = movie.Title || movie.title || 'Unknown Title';
        const year = movie.Year || movie.year || '';
        const imdbId = movie.imdbID || movie.imdbId || '';
        const imdbRating = movie.imdbRating ? `<div class="badge bg-warning text-dark">${movie.imdbRating}/10</div>` : '';
        
        const movieCard = document.createElement('div');
        movieCard.className = 'col-6 col-md-4 col-lg-3 mb-4';
        
        movieCard.innerHTML = `
          <div class="card movie-card">
            <img src="${posterUrl}" class="card-img-top movie-poster" alt="${title}" onerror="this.src='/resources/img/no-poster.png'">
            <div class="card-body">
              <h5 class="card-title movie-title" title="${title}">${title}</h5>
              <div class="movie-info">
                <p class="card-text text-muted">${year}</p>
                ${imdbRating}
              </div>
            </div>
            <div class="card-footer bg-transparent border-top-0">
              <a href="/movies/details/${imdbId}" class="btn btn-primary w-100">View Details</a>
            </div>
          </div>
        `;
        
        moviesContainer.appendChild(movieCard);
      });
    }
    
    function updatePagination() {
      const totalPages = Math.ceil(totalResults / 10);
      
      if (totalPages <= 1) {
        pagination.style.display = 'none !important';
        return;
      }
      
      pagination.style.display = 'flex !important';
      
      // Update previous button
      if (currentPage <= 1) {
        prevPageBtn.classList.add('disabled');
      } else {
        prevPageBtn.classList.remove('disabled');
      }
      
      // Update next button
      if (currentPage >= totalPages) {
        nextPageBtn.classList.add('disabled');
      } else {
        nextPageBtn.classList.remove('disabled');
      }
      
      // Add page counter
      const pageCounter = document.createElement('li');
      pageCounter.className = 'page-item active';
      pageCounter.innerHTML = `<span class="page-link">Page ${currentPage} of ${totalPages}</span>`;
      
      const paginationList = document.querySelector('.pagination');
      
      // Remove any existing page counter
      const existingCounter = document.querySelector('.pagination .active');
      if (existingCounter) {
        existingCounter.remove();
      }
      
      // Insert counter between prev and next buttons
      paginationList.insertBefore(pageCounter, nextPageBtn);
    }
  });
</script>