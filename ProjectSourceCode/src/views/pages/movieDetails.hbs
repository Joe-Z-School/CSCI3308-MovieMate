{{> nav}}
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.0/font/bootstrap-icons.css">

<div class="container-fluid movie-details-container">
  <div class="row">
    <!-- Back button -->
    <div class="col-12 mb-4">
      <button class="btn back-btn" onclick="history.back()">
        <i class="bi bi-arrow-left"></i> Back to Browse
      </button>
    </div>
    
    <!-- Main content -->
    <div class="col-lg-12">
      <div class="content-wrapper">
        <!-- Movie loading skeleton -->
        <div id="movie-loading" class="py-4 text-center">
          <div class="spinner" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Loading movie details...</p>
        </div>
        
        <!-- Movie details content -->
        <div id="movie-content" class="animate-fade-in" style="display: none;">
          <div class="row g-4">
            <!-- Movie poster column -->
            <div class="col-sm-4 col-lg-3">
              <div class="movie-poster-container">
                <img id="movie-poster" src="" alt="Movie Poster" class="movie-detail-poster">
                <div class="movie-actions">
                  <button id="add-watchlist-btn" class="btn action-btn watchlist-btn" data-movie-id="">
                    <i class="bi bi-plus-lg"></i> Watchlist
                  </button>
                  <button id="mark-watched-btn" class="btn action-btn watched-btn" data-movie-id="">
                    <i class="bi bi-check2-circle"></i> Watched
                  </button>
                </div>
              </div>
            </div>
            
            <!-- Movie details column -->
            <div class="col-sm-8 col-lg-9">
              <div class="movie-details-header">
                <h1 id="movie-title" class="movie-title"></h1>
                <div class="movie-meta">
                  <span id="movie-year" class="movie-year"></span>
                  <span class="separator">•</span>
                  <span id="movie-runtime" class="movie-runtime"></span>
                  <span class="separator">•</span>
                  <span id="movie-rated" class="movie-rated"></span>
                </div>
                
                <!-- Ratings section -->
                <div class="ratings-container">
                  <div class="rating rating-imdb">
                    <div class="rating-logo">IMDb</div>
                    <div id="rating-imdb" class="rating-score"></div>
                  </div>
                  <div class="rating rating-rt">
                    <div class="rating-logo">RT</div>
                    <div id="rating-rt" class="rating-score"></div>
                  </div>
                  <div class="rating rating-metacritic">
                    <div class="rating-logo">MC</div>
                    <div id="rating-metacritic" class="rating-score"></div>
                  </div>
                </div>
              </div>
              
              <div class="movie-genre-tags" id="movie-genres">
                <!-- Genre tags will be inserted here -->
              </div>
              
              <div class="movie-details-section">
                <h3 class="section-title">Overview</h3>
                <p id="movie-plot" class="movie-plot"></p>
              </div>
              
              <div class="movie-details-section">
                <h3 class="section-title">Cast & Crew</h3>
                <div class="detail-group">
                  <span class="detail-label">Director:</span>
                  <span id="movie-director" class="detail-value"></span>
                </div>
                <div class="detail-group">
                  <span class="detail-label">Writers:</span>
                  <span id="movie-writer" class="detail-value"></span>
                </div>
                <div class="detail-group">
                  <span class="detail-label">Stars:</span>
                  <span id="movie-actors" class="detail-value"></span>
                </div>
              </div>
              
              <div class="movie-details-section">
                <h3 class="section-title">Additional Info</h3>
                <div class="detail-group">
                  <span class="detail-label">Released:</span>
                  <span id="movie-released" class="detail-value"></span>
                </div>
                <div class="detail-group">
                  <span class="detail-label">Box Office:</span>
                  <span id="movie-boxoffice" class="detail-value"></span>
                </div>
                <div class="detail-group">
                  <span class="detail-label">Production:</span>
                  <span id="movie-production" class="detail-value"></span>
                </div>
                <div class="detail-group">
                  <span class="detail-label">Awards:</span>
                  <span id="movie-awards" class="detail-value"></span>
                </div>
              </div>
            </div>
          </div>
          
        <!-- Trailer Section -->
        <div class="trailer-section mt-3">
        <h3 class="section-title">Trailer</h3>
        <div class="trailer-container">
            <div id="trailer-loading" class="text-center py-3">
            <div class="spinner-sm" role="status">
                <span class="visually-hidden">Loading trailer...</span>
            </div>
            <p class="mt-2">Searching for trailer...</p>
            </div>
            
            <div id="trailer-content" style="display: none;">
            <div class="embed-responsive ratio ratio-16x9">
                <iframe id="trailer-iframe" class="embed-responsive-item" src="" allowfullscreen></iframe>
            </div>
            </div>
            
            <div id="trailer-error" class="trailer-placeholder" style="display: none;">
            <div class="placeholder-content">
                <i class="bi bi-film"></i>
                <p>Trailer not available</p>
                <a id="youtube-search" href="#" target="_blank" class="btn trailer-btn">
                <i class="bi bi-youtube"></i> Search on YouTube
                </a>
            </div>
            </div>
        </div>
        </div>
          
          <!-- User Reviews Section -->
          <div class="reviews-section mt-3">
            <div class="d-flex justify-content-between align-items-center mb-2">
              <h3 class="section-title">User Reviews</h3>
              <button class="btn add-review-btn btn-sm" data-bs-toggle="modal" data-bs-target="#reviewModal">
                <i class="bi bi-plus-lg"></i> Add Review
              </button>
            </div>
            
            <div id="reviews-container">
              <div id="reviews-loading" class="text-center py-4">
                <div class="spinner-sm" role="status">
                  <span class="visually-hidden">Loading reviews...</span>
                </div>
                <p>Loading reviews...</p>
              </div>
              <div id="reviews-content"></div>
              <div id="no-reviews" class="text-center py-4" style="display: none;">
                <p>No reviews yet. Be the first to review this movie!</p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Review Modal -->
<div class="modal fade" id="reviewModal" tabindex="-1" aria-labelledby="reviewModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="reviewModalLabel">Write a Review</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="reviewForm">
          <div class="mb-3">
            <label for="ratingInput" class="form-label">Rating</label>
            <div class="rating-input">
              <div class="stars">
                <i class="bi bi-star star" data-rating="1"></i>
                <i class="bi bi-star star" data-rating="2"></i>
                <i class="bi bi-star star" data-rating="3"></i>
                <i class="bi bi-star star" data-rating="4"></i>
                <i class="bi bi-star star" data-rating="5"></i>
              </div>
              <input type="hidden" id="ratingInput" name="rating" value="0">
              <span class="rating-text">0/5</span>
            </div>
          </div>
          <div class="mb-3">
            <label for="reviewComment" class="form-label">Comment</label>
            <textarea class="form-control" id="reviewComment" name="comment" rows="4" placeholder="Share your thoughts about this movie..."></textarea>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="submitReviewBtn">Submit Review</button>
      </div>
    </div>
  </div>
</div>

<!-- CSS for Movie Details Page -->
<style>
  /* Purple color scheme */
  :root {
    --primary-purple: #5F4B8B;
    --secondary-purple: #C4C3E3;
    --light-purple: #E9E8F7;
    --dark-purple: #4a3a6d;
    --accent-purple: #9683C3;
  }
  
  body {
    background-color: #121212;
  }
  
  .movie-details-container {
    padding: 20px;
    width: 100%;
    max-width: 1920px;
    margin: 0 auto;
  }
  
  /* Back button */
  .back-btn {
    color: #fff;
    background-color: rgba(95, 75, 139, 0.2);
    border: none;
    padding: 8px 16px;
    border-radius: 8px;
    transition: all 0.3s ease;
    margin-top: 10px;
  }
  
  .back-btn:hover {
    background-color: var(--primary-purple);
    transform: translateX(-5px);
  }
  
  /* Main content wrapper */
  .content-wrapper {
    background-color: #1E1E1E;
    border-radius: 10px;
    padding: 15px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
  
  /* Loading spinner */
  .spinner {
    display: inline-block;
    width: 50px;
    height: 50px;
    border: 3px solid rgba(95, 75, 139, 0.3);
    border-radius: 50%;
    border-top-color: var(--primary-purple);
    animation: spin 1s ease-in-out infinite;
  }
  
  .spinner-sm {
    width: 30px;
    height: 30px;
    border-width: 2px;
  }
  
  @keyframes spin {
    to { transform: rotate(360deg); }
  }
  
  /* Animations */
  .animate-fade-in {
    animation: fadeIn 0.5s ease forwards;
    opacity: 0;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  /* Movie poster */
  .movie-poster-container {
    position: relative;
    margin-bottom: 15px;
  }
  
  .movie-detail-poster {
    width: 100%;
    max-height: 450px;
    object-fit: contain;
    border-radius: 8px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.3);
  }
  
  /* Movie actions */
  .movie-actions {
    display: flex;
    gap: 10px;
    margin-top: 12px;
  }
  
  .action-btn {
    flex: 1;
    padding: 8px;
    border-radius: 6px;
    font-size: 0.85rem;
    font-weight: 600;
    transition: all 0.3s ease;
  }
  
  .watchlist-btn {
    background-color: var(--primary-purple);
    color: white;
    border: none;
  }
  
  .watchlist-btn:hover {
    background-color: var(--dark-purple);
    transform: translateY(-2px);
  }
  
  .watched-btn {
    background-color: transparent;
    color: white;
    border: 2px solid var(--primary-purple);
  }
  
  .watched-btn:hover {
    background-color: rgba(95, 75, 139, 0.2);
    transform: translateY(-2px);
  }
  
  /* Movie details styling */
  .movie-details-header {
    margin-bottom: 15px;
  }
  
  .movie-title {
    color: #fff;
    font-size: 1.8rem;
    font-weight: 700;
    margin-bottom: 5px;
    line-height: 1.2;
  }
  
  .movie-meta {
    color: #aaa;
    font-size: 0.9rem;
    margin-bottom: 15px;
  }
  
  .separator {
    margin: 0 5px;
  }
  
  /* Ratings */
  .ratings-container {
    display: flex;
    gap: 10px;
    margin-bottom: 15px;
  }
  
  .rating {
    display: flex;
    align-items: center;
    gap: 5px;
    padding: 5px 10px;
    border-radius: 6px;
    background-color: #2A2A2A;
    font-size: 0.85rem;
  }
  
  .rating-logo {
    font-weight: 700;
    color: #ddd;
  }
  
  .rating-score {
    font-weight: 700;
    color: var(--accent-purple);
  }
  
  .rating-imdb .rating-logo {
    color: #f5c518;
  }
  
  .rating-rt .rating-logo {
    color: #fa320a;
  }
  
  .rating-metacritic .rating-logo {
    color: #66cc33;
  }
  
  /* Genre tags */
  .movie-genre-tags {
    display: flex;
    flex-wrap: wrap;
    gap: 6px;
    margin-bottom: 15px;
  }
  
  .genre-tag {
    background-color: rgba(95, 75, 139, 0.2);
    color: var(--accent-purple);
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 0.75rem;
    transition: all 0.3s ease;
  }
  
  .genre-tag:hover {
    background-color: var(--accent-purple);
    color: white;
    transform: translateY(-2px);
  }
  
  /* Section styling */
  .movie-details-section {
    margin-bottom: 20px;
    color: #ddd;
  }
  
  .section-title {
    color: #fff;
    border-bottom: 1px solid #333;
    padding-bottom: 5px;
    margin-bottom: 10px;
    font-size: 1.1rem;
    font-weight: 600;
  }
  
  .movie-plot {
    line-height: 1.5;
    color: #bbb;
    font-size: 0.95rem;
    max-height: 6em;
    overflow: hidden;
    position: relative;
  }
  
  .movie-plot.expanded {
    max-height: none;
  }
  
  .movie-plot:not(.expanded)::after {
    content: "...";
    position: absolute;
    bottom: 0;
    right: 0;
    background-color: #1E1E1E;
    padding-left: 3px;
  }
  
  .detail-group {
    margin-bottom: 10px;
  }
  
  .detail-label {
    font-weight: 600;
    color: #fff;
    margin-right: 8px;
  }
  
  .detail-value {
    color: #bbb;
  }
  
  /* Trailer section */
  .trailer-container {
    border-radius: 8px;
    overflow: hidden;
    background-color: #2A2A2A;
  }
  
  .trailer-placeholder {
    height: 250px;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #777;
  }
  
  .placeholder-content {
    text-align: center;
  }
  
  .placeholder-content i {
    font-size: 3rem;
    margin-bottom: 15px;
    opacity: 0.5;
  }
  
  .trailer-btn {
    margin-top: 15px;
    background-color: #FF0000;
    color: white;
    border: none;
    transition: all 0.3s ease;
  }
  
  .trailer-btn:hover {
    background-color: #cc0000;
    transform: translateY(-2px);
    color: white;
  }
  
  /* Reviews section */
  .add-review-btn {
    background-color: var(--primary-purple);
    color: white;
    border: none;
    transition: all 0.3s ease;
  }
  
  .add-review-btn:hover {
    background-color: var(--dark-purple);
    transform: translateY(-2px);
  }
  
  /* Review styles */
  .review-card {
    background-color: #2A2A2A;
    border-radius: 8px;
    padding: 12px;
    margin-bottom: 10px;
    font-size: 0.9rem;
  }
  
  .review-header {
    display: flex;
    justify-content: space-between;
    margin-bottom: 8px;
    align-items: center;
  }
  
  .reviewer-info {
    display: flex;
    align-items: center;
  }
  
  .reviewer-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    margin-right: 10px;
    background-color: var(--dark-purple);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
  }
  
  .reviewer-name {
    color: white;
    font-weight: 600;
  }
  
  .review-rating {
    color: #ffc107;
    font-weight: 600;
  }
  
  .review-rating i {
    margin-left: 2px;
  }
  
  .review-date {
    color: #777;
    font-size: 0.9rem;
    margin-top: 3px;
  }
  
  .review-content {
    color: #bbb;
    line-height: 1.6;
  }
  
  /* Review Modal */
  .modal-content {
    background-color: #2A2A2A;
    color: #ddd;
  }
  
  .modal-header {
    border-bottom-color: #444;
  }
  
  .modal-footer {
    border-top-color: #444;
  }
  
  .rating-input {
    display: flex;
    align-items: center;
  }
  
  .stars {
    display: flex;
    margin-right: 10px;
  }
  
  .star {
    color: #777;
    font-size: 1.5rem;
    margin-right: 5px;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .star:hover,
  .star.selected {
    color: #ffc107;
  }
  
  .rating-text {
    color: #bbb;
  }
  
  /* Form elements */
  .form-control {
    background-color: #333;
    border-color: #444;
    color: #fff;
  }
  
  .form-control:focus {
    background-color: #333;
    color: #fff;
    border-color: var(--accent-purple);
    box-shadow: 0 0 0 0.25rem rgba(150, 131, 195, 0.25);
  }

/* YouTube trailer embed styling */
  .embed-responsive {
  position: relative;
  overflow: hidden;
  width: 100%;
  border-radius: 8px;
}

.ratio {
  position: relative;
  width: 100%;
}

.ratio::before {
  display: block;
  content: "";
}

.ratio-16x9::before {
  padding-top: 56.25%;
}

.ratio > * {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: 0;
}

.spinner-sm {
  display: inline-block;
  width: 30px;
  height: 30px;
  border: 2px solid rgba(95, 75, 139, 0.3);
  border-radius: 50%;
  border-top-color: var(--primary-purple);
  animation: spin 1s ease-in-out infinite;
}
  
  /* Responsive adjustments */
  @media (max-width: 767.98px) {
    .movie-title {
      font-size: 1.8rem;
    }
    
    .ratings-container {
      flex-wrap: wrap;
    }
    
    .trailer-placeholder {
      height: 250px;
    }
  }
</style>

<!-- Movie Details Scripts -->
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const imdbId = '{{imdbId}}';
    let movieData = null;
    
    // Load movie details on page load
    loadMovieDetails(imdbId);
    loadMovieReviews(imdbId);
    
    // Set up star rating in review modal
    setupStarRating();
    
    // Add toggle functionality for plot expansion
    document.addEventListener('click', function(e) {
      if (e.target && e.target.id === 'movie-plot') {
        e.target.classList.toggle('expanded');
      }
    });
    
    // Handle review submission
    document.getElementById('submitReviewBtn').addEventListener('click', submitReview);
    
    // Load movie trailer function
    function loadMovieTrailer(movie) {
      const trailerLoading = document.getElementById('trailer-loading');
      const trailerContent = document.getElementById('trailer-content');
      const trailerError = document.getElementById('trailer-error');
      const trailerIframe = document.getElementById('trailer-iframe');
      const youtubeSearch = document.getElementById('youtube-search');
      
      // Set YouTube search link regardless of result
      youtubeSearch.href = `https://www.youtube.com/results?search_query=${encodeURIComponent(movie.Title + ' official trailer')}`;
      
      // Fetch trailer from API endpoint
      fetch(`/api/movies/trailer/${encodeURIComponent(movie.Title + ' ' + movie.Year)}`)
        .then(response => response.json())
        .then(data => {
          trailerLoading.style.display = 'none';
          
          if (data.success) {
            // Set iframe source and show content
            trailerIframe.src = data.embedUrl;
            trailerContent.style.display = 'block';
          } else {
            // Show error placeholder
            trailerError.style.display = 'flex';
          }
        })
        .catch(error => {
          console.error('Error loading trailer:', error);
          trailerLoading.style.display = 'none';
          trailerError.style.display = 'flex';
        });
    }
    
    // Load movie details from API
    function loadMovieDetails(id) {
      fetch(`/api/movies/details/${id}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          if (data.success) {
            movieData = data.movie;
            displayMovieDetails(movieData);
          } else {
            showErrorMessage('Failed to load movie details');
          }
        })
        .catch(error => {
          console.error('Error loading movie details:', error);
          showErrorMessage('Failed to load movie details');
        });
    }
    
    // Display movie details in the UI
    function displayMovieDetails(movie) {
      // Hide loading, show content
      document.getElementById('movie-loading').style.display = 'none';
      document.getElementById('movie-content').style.display = 'block';
      
      // Set movie poster
      const posterEl = document.getElementById('movie-poster');
      posterEl.src = movie.Poster !== 'N/A' ? movie.Poster : '/api/placeholder/300/450';
      posterEl.alt = `${movie.Title} Poster`;
      
      // Set movie details
      document.getElementById('movie-title').textContent = movie.Title;
      document.getElementById('movie-year').textContent = movie.Year;
      document.getElementById('movie-runtime').textContent = movie.Runtime;
      document.getElementById('movie-rated').textContent = movie.Rated;
      document.getElementById('movie-plot').textContent = movie.Plot;
      document.getElementById('movie-director').textContent = movie.Director;
      document.getElementById('movie-writer').textContent = movie.Writer;
      document.getElementById('movie-actors').textContent = movie.Actors;
      document.getElementById('movie-released').textContent = movie.Released;
      document.getElementById('movie-boxoffice').textContent = movie.BoxOffice || 'Not Available';
      document.getElementById('movie-production').textContent = movie.Production || 'Not Available';
      document.getElementById('movie-awards').textContent = movie.Awards;
      
      // Set ratings
      if (movie.Ratings && movie.Ratings.length > 0) {
        // IMDb rating
        const imdbRating = movie.imdbRating !== 'N/A' ? movie.imdbRating : 'N/A';
        document.getElementById('rating-imdb').textContent = imdbRating;
        
        // Get Rotten Tomatoes rating
        const rtRating = movie.Ratings.find(r => r.Source === 'Rotten Tomatoes');
        document.getElementById('rating-rt').textContent = rtRating ? rtRating.Value : 'N/A';
        
        // Get Metacritic rating
        const mcRating = movie.Ratings.find(r => r.Source === 'Metacritic');
        document.getElementById('rating-metacritic').textContent = mcRating ? mcRating.Value : 'N/A';
      }
      
      // Set genres
      const genresContainer = document.getElementById('movie-genres');
      genresContainer.innerHTML = '';
      if (movie.Genre) {
        const genres = movie.Genre.split(', ');
        genres.forEach(genre => {
          const genreTag = document.createElement('span');
          genreTag.className = 'genre-tag';
          genreTag.textContent = genre;
          genresContainer.appendChild(genreTag);
        });
      }
      
      // Set up watchlist buttons
      const watchlistBtn = document.getElementById('add-watchlist-btn');
      const watchedBtn = document.getElementById('mark-watched-btn');
      watchlistBtn.setAttribute('data-movie-id', movie.imdbID);
      watchedBtn.setAttribute('data-movie-id', movie.imdbID);
      
      // Call loadMovieTrailer with the movie data
      loadMovieTrailer(movie);
    }
    
    // Load movie reviews
    function loadMovieReviews(id) {
      fetch(`/api/movies/reviews/${id}`)
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          document.getElementById('reviews-loading').style.display = 'none';
          
          if (data.success && data.reviews && data.reviews.length > 0) {
            displayReviews(data.reviews);
          } else {
            document.getElementById('no-reviews').style.display = 'block';
          }
        })
        .catch(error => {
          console.error('Error loading reviews:', error);
          document.getElementById('reviews-loading').style.display = 'none';
          document.getElementById('no-reviews').style.display = 'block';
        });
    }
    
    // Display reviews in the UI
    function displayReviews(reviews) {
      const container = document.getElementById('reviews-content');
      container.innerHTML = '';
      
      reviews.forEach(review => {
        const reviewCard = document.createElement('div');
        reviewCard.className = 'review-card';
        
        const date = new Date(review.created_at);
        const formattedDate = date.toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        });
        
        // Generate stars based on rating
        let stars = '';
        for (let i = 1; i <= 5; i++) {
          stars += `<i class="bi ${i <= review.rating ? 'bi-star-fill' : 'bi-star'}"></i>`;
        }
        
        reviewCard.innerHTML = `
          <div class="review-header">
            <div class="reviewer-info">
              <div class="reviewer-avatar">${review.username.charAt(0).toUpperCase()}</div>
              <div>
                <div class="reviewer-name">${review.username}</div>
                <div class="review-date">${formattedDate}</div>
              </div>
            </div>
            <div class="review-rating">
              ${stars}
            </div>
          </div>
          <div class="review-content">
            ${review.comment}
          </div>
        `;
        
        container.appendChild(reviewCard);
      });
    }
    
    // Setup star rating functionality
    function setupStarRating() {
      const stars = document.querySelectorAll('.star');
      const ratingInput = document.getElementById('ratingInput');
      const ratingText = document.querySelector('.rating-text');
      
      stars.forEach(star => {
        star.addEventListener('click', function() {
          const rating = parseInt(this.getAttribute('data-rating'));
          
          // Update hidden input and text
          ratingInput.value = rating;
          ratingText.textContent = `${rating}/5`;
          
          // Update star styling
          stars.forEach(s => {
            const starRating = parseInt(s.getAttribute('data-rating'));
            if (starRating <= rating) {
              s.classList.add('selected');
              s.classList.remove('bi-star');
              s.classList.add('bi-star-fill');
            } else {
              s.classList.remove('selected');
              s.classList.remove('bi-star-fill');
              s.classList.add('bi-star');
            }
          });
        });
      });
    }
    
    // Submit a review
    function submitReview() {
      const rating = document.getElementById('ratingInput').value;
      const comment = document.getElementById('reviewComment').value;
      
      if (!rating || rating === '0') {
        alert('Please select a rating');
        return;
      }
      
      if (!comment.trim()) {
        alert('Please write a comment');
        return;
      }
      
      // Submit the review to the API
      fetch('/api/movies/review', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          imdbId: imdbId,
          rating: rating,
          comment: comment
        }),
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Close modal and refresh reviews
          const modal = bootstrap.Modal.getInstance(document.getElementById('reviewModal'));
          modal.hide();
          
          // Reset form
          document.getElementById('reviewForm').reset();
          document.getElementById('ratingInput').value = '0';
          document.querySelector('.rating-text').textContent = '0/5';
          document.querySelectorAll('.star').forEach(s => {
            s.classList.remove('selected');
            s.classList.remove('bi-star-fill');
            s.classList.add('bi-star');
          });
          
          // Reload reviews
          document.getElementById('reviews-loading').style.display = 'block';
          document.getElementById('reviews-content').innerHTML = '';
          document.getElementById('no-reviews').style.display = 'none';
          loadMovieReviews(imdbId);
        } else {
          alert('Failed to submit review');
        }
      })
      .catch(error => {
        console.error('Error submitting review:', error);
        alert('Failed to submit review');
      });
    }
    
    // Display error message
    function showErrorMessage(message) {
      document.getElementById('movie-loading').innerHTML = `
        <div class="error-message">
          <i class="bi bi-exclamation-triangle"></i>
          <p>${message}</p>
          <button class="btn btn-primary" onclick="location.reload()">Try Again</button>
        </div>
      `;
    }
    
    // Add to watchlist
    document.getElementById('add-watchlist-btn').addEventListener('click', function() {
      const movieId = this.getAttribute('data-movie-id');
      
      // Show loading state
      this.disabled = true;
      this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Adding...';
      
      // Add to watchlist API call
      fetch('/api/movies/watchlist', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ imdbId: movieId }),
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Update button to show success
          this.innerHTML = '<i class="bi bi-check-lg"></i> Added to Watchlist';
          this.classList.add('added');
          setTimeout(() => {
            this.disabled = false;
          }, 1500);
        } else {
          // Show error and reset
          this.innerHTML = '<i class="bi bi-plus-lg"></i> Watchlist';
          this.disabled = false;
          if (data.error === 'User not authenticated') {
            window.location.href = '/login';
          } else {
            alert(data.error || 'Failed to add to watchlist');
          }
        }
      })
      .catch(error => {
        console.error('Error:', error);
        this.innerHTML = '<i class="bi bi-plus-lg"></i> Watchlist';
        this.disabled = false;
        alert('Failed to add to watchlist');
      });
    });
    
    // Mark as watched
    document.getElementById('mark-watched-btn').addEventListener('click', function() {
      const movieId = this.getAttribute('data-movie-id');
      
      // Show loading state
      this.disabled = true;
      this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Updating...';
      
      // Mark as watched API call
      fetch('/api/movies/watched', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ imdbId: movieId }),
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          // Update button to show success
          this.innerHTML = '<i class="bi bi-check2-circle"></i> Watched';
          this.classList.add('added');
          setTimeout(() => {
            this.disabled = false;
          }, 1500);
        } else {
          // Show error and reset
          this.innerHTML = '<i class="bi bi-check2-circle"></i> Watched';
          this.disabled = false;
          if (data.error === 'User not authenticated') {
            window.location.href = '/login';
          } else {
            alert(data.error || 'Failed to mark as watched');
          }
        }
      })
      .catch(error => {
        console.error('Error:', error);
        this.innerHTML = '<i class="bi bi-check2-circle"></i> Watched';
        this.disabled = false;
        alert('Failed to mark as watched');
      });
    });
  });
</script>