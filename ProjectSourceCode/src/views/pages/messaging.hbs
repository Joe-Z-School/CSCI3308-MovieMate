<div class="container-fluid">
  <div class="row vh-100">
    <!-- Friends List Section -->
    <div class="col-md-2 col-sm-12 border-end bg-dark">
      <h5 class="p-3">Friends List</h5>
      <div class="friends-list">
        <!-- Favorites -->
        <h6 class="px-3 mt-3">Favorites</h6>
        <ul class="list-group list-group-flush" id="favorites">
          {{#each favorites}}
          <li class="list-group-item">
            {{this.name}} <span class="badge bg-warning">{{this.status}}</span>
          </li>
          {{/each}}
        </ul>

        <!-- Unread Messages -->
        <h6 class="px-3 mt-3">Unread Messages</h6>
        <ul class="list-group list-group-flush" id="unread">
          {{#each unreadMessages}}
          <li class="list-group-item">
            {{this.name}} <span class="badge bg-danger">Unread</span>
          </li>
          {{/each}}
        </ul>

        <!-- Online Friends -->
        <h6 class="px-3 mt-3">Online Friends</h6>
        <ul class="list-group list-group-flush" id="online">
          {{#each onlineFriends}}
          <li class="list-group-item">
            {{this.name}} <span class="badge bg-success">Online</span>
          </li>
          {{/each}}
        </ul>

        <!-- All Friends -->
        <h6 class="px-3 mt-3">All Friends</h6>
        <ul class="list-group list-group-flush" id="all-friends">
          {{#each allFriends}}
          <li class="list-group-item">{{this.name}}</li>
          {{/each}}
        </ul>
      </div>
    </div>

    <!-- Chat Area Section -->
    <div class="col-md-8 col-sm-12 d-flex flex-column">
      <div class="chat-header border-bottom p-3">
        <h5 id="chat-user-name">Chatting with: {{activeUser.name}}</h5>
        <p id="typing-status" class="text-muted small"> </p>
      </div>

      <div class="chat-body flex-grow-1 p-3 overflow-auto" id="chat-messages">
        <!-- Messages will be dynamically appended here -->
      </div>

      <div class="chat-footer p-3 border-top">
        <div class="d-flex align-items-center">
          <!-- Message Input -->
          <input
            type="text"
            id="message-input"
            class="form-control me-2"
            placeholder="Type a message..."
          />
          <!-- Emojis Button -->
          <button id="emoji-btn" class="btn btn-outline-secondary me-2">
            ðŸ˜Š
          </button>
          <!-- File Upload Button -->
          <label class="btn btn-outline-secondary me-2">
            ðŸ“·
            <input
              type="file"
              id="file-input"
              class="d-none"
              accept="image/*"
            />
          </label>
          <!-- Send Button -->
          <button id="send-btn" class="btn btn-primary">Send</button>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();

  // Listeners
  const messageInput = document.getElementById("message-input");
  const sendBtn = document.getElementById("send-btn");
  const emojiBtn = document.getElementById("emoji-btn");
  const fileInput = document.getElementById("file-input");
  const typingStatus = document.getElementById("typing-status");

  // Emit Typing Event
  messageInput.addEventListener("input", () => {
    socket.emit("typing", { user: "{{userName}}" });
  });

  // Receive Typing Event
  socket.on("typing", (data) => {
    typingStatus.textContent = `${data.user} is typing...`;
    setTimeout(() => (typingStatus.textContent = ""), 3000);
  });

  // Emit Message Event
  sendBtn.addEventListener("click", () => {
    const message = messageInput.value;
    if (message.trim()) {
      socket.emit("chat-message", { message, user: "{{userName}}" });
      messageInput.value = ""; // Clear input
    }
  });

  // Receive Message
  socket.on("chat-message", (data) => {
    const chatMessages = document.getElementById("chat-messages");
    const msgElement = document.createElement("div");
    msgElement.textContent = `${data.user}: ${data.message}`;
    chatMessages.appendChild(msgElement);
  });

  // Handle Emojis
  emojiBtn.addEventListener("click", () => {
    alert("Emoji picker to be implemented!");
  });

  // File Upload
  fileInput.addEventListener("change", () => {
    const file = fileInput.files[0];
    alert(`Selected file: ${file.name}`);
  });

  
</script>

<style>
/* General Reset */
body {
  margin: 0;
  padding: 0;
  font-family: 'Arial', sans-serif;
  background-color: #121212; /* Dark mode background */
  color: #e0e0e0; /* Light text color for contrast */
  overflow-x: hidden; /* Prevent horizontal scrollbars */
}

body {
  background-color: #121212 !important;
  color: #e0e0e0;
}

/* Friends List Container (Ensure Background is Dark) */
.friends-list {
  background-color: #1c1c1c !important; /* Apply a dark background */
  color: #e0e0e0; /* Ensure text color is light for contrast */
  border: 1px solid #333333; /* Subtle border for definition */
  border-radius: 8px; /* Modern rounded corners */
  padding: 10px;
  max-height: 90vh;
  overflow-y: auto;
}

/* Friends List Headers (Section Titles) */
.friends-list h6 {
  color: #ffffff;
  background-color: #333333;
  padding: 8px;
  border-radius: 4px;
  margin: 5px 0;
  text-transform: uppercase;
}

/* List Items */
.list-group-item {
  background-color: transparent;
  color: #e0e0e0;
  border: none;
  transition: all 0.3s ease-in-out;
}

.list-group-item:hover {
  background-color: #444444; /* Subtle hover effect */
  transform: scale(1.05); /* Adds a slight zoom effect */
}



/* Chat Area Styling */
.chat-header {
  background-color: #1e1e1e;
  border-radius: 8px;
  padding: 15px;
  margin-bottom: 10px;
}

.chat-body {
  background-color: #1c1c1c;
  border-radius: 8px;
  padding: 15px;
  box-shadow: inset 0px 0px 10px #000000;
  animation: slideUp 0.5s ease-in-out;
}

/* Chat Footer Styling */
.chat-footer {
  background-color: #1e1e1e;
  border-radius: 8px;
}

#message-input {
  background-color: #2a2a2a;
  color: #e0e0e0;
  border: none;
}

#message-input:focus {
  outline: none;
  box-shadow: 0 0 5px #64b5f6;
}

button {
  color: #e0e0e0;
  background-color: #333333;
  border: none;
  transition: all 0.3s ease-in-out;
}

button:hover {
  background-color: #64b5f6;
  color: #121212;
}

/* Typing Status Styling */
#typing-status {
  color: #64b5f6;
  font-style: italic;
}

/* Animations */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes slideUp {
  from {
    transform: translateY(20px);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

</style>
